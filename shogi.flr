movie 'C:\Users\loftk\Desktop\ham-shogi-ruffle\shogi.swf' {
// flash 6, total frames: 5, frame rate: 30 fps, 548x334 px, compressed

  frame 1 {
    if (getbytesloaded() >= math.floor(1.0 * getbytestotal())) {
      gotoAndPlay(3);
    }
    if (plcount == undefined) {
      barmc._xwidth = 1;
    }
  }

  movieClip 5  {

    frame 2 {
      gotoAndPlay(1);
    }
  }

  frame 2 {
    plcount = 1;
    barmc._xscale = (getBytesLoaded() / getBytesTotal()) * 100;
    gotoAndPlay(1);
  }

  movieClip 57  {
  }

  movieClip 58  {

    frame 2 {
      stop();
    }

    frame 3 {
      init();
    }

    frame 4 {
      doeffect();
    }

    frame 5 {
      gotoAndPlay(4);
    }
  }

  movieClip 61  {
  }

  movieClip 62  {

    frame 2 {
      stop();
    }

    frame 3 {
      init();
    }

    frame 4 {
      doeffect();
    }

    frame 5 {
      gotoAndPlay(4);
    }
  }

  movieClip 65  {
  }

  movieClip 66  {

    frame 2 {
      stop();
    }

    frame 3 {
      init();
    }

    frame 4 {
      doeffect();
    }

    frame 5 {
      gotoAndPlay(4);
    }
  }

  movieClip 67  {

    frame 1 {
      function letterinit() {
        if (this.timerstarted == 1) {
        } else {
          this.timerstarted = 0;
        }
        this._visible = true;
        this.speed = this._parent.speed;
        this.alphaspeed = this._parent.alphaspeed;
      }

      function effect() {
        if (this.timerstarted == 0) {
          this.start = getTimer();
          this.timerstarted = 1;
          this.gotoandplay(3);
        } else {
          if (this.start + this._parent.startdelay < getTimer()) {
            this._xscale += this.speed;
            this._yscale += this.speed;
            this._alpha -= this.alphaspeed;
            if (this._xscale >= this._parent.scale) {
              this.gotoandstop('end');
              this._alpha = 100;
              this._xscale = 100;
              this._yscale = 100;
              this._visible = false;
              this.timerstarted = 0;
            }
          } else {
            this.gotoandplay(3);
          }
        }
      }

      function shuffle() {
        return math.floor(math.random() * 3) - 1;
      }

      numchar = 3;
      speed = 300;
      random = 0;
      reverse = 0;
      alpha = 0;
      delay = 400;
      loop = 0;
      loopdelay = 0;
      waitcharend = 0;
      scale = 5000;
      startdelay = 1000;
      mcn = 'letter';
      alphaspeed = math.floor((100 - alpha) / ((scale - 100) / speed));
      aletters = new array();
      i = 0;
      while (i < numchar) {
        aletters[i + 0] = i;
        var letter = this[mcn + i];
        letter._visible = true;
        letter.init = letterinit;
        letter.doeffect = effect;
        letter.number = i;
        ++i;
      }
      if (random == 1) {
        aletters.sort(shuffle);
      }
      if (reverse == 1) {
        aletters.reverse();
      }
    }

    frame 2 {
      i = 0;
      now = getTimer();
      loopnow = 0;
    }

    frame 3 {
      this[mcn + aletters[i]].gotoandplay(3);
      now = getTimer();
      i += 1;
      if (i == numchar) {
        gotoAndStop(7);
      }
    }

    frame 5 {
      if (waitcharend == 1) {
        if (this[mcn + aletters[i - 1]]._currentframe == this[mcn + aletters[i - 1]]._totalframes and now + delay < getTimer()) {
          gotoAndPlay(this._currentframe - 2);
        } else {
          gotoAndPlay(this._currentframe - 1);
        }
      } else {
        if (now + delay < getTimer()) {
          gotoAndPlay(this._currentframe - 2);
        } else {
          gotoAndPlay(this._currentframe - 1);
        }
      }
    }

    frame 7 {
      if (loop == 1) {
        if (loopnow != 1) {
          if (this[mcn + aletters[numchar - 1]]._currentframe == this[mcn + aletters[numchar - 1]]._totalframes) {
            loopnow = 1;
            now = getTimer();
          }
        }
        if (getTimer() >= now + loopdelay and loopnow == 1) {
          gotoAndPlay(2);
        } else {
          prevFrame();
          play();
        }
      } else {
        stop();
      }
    }
  }

  movieClip 70  {
  }

  movieClip 71  {

    frame 2 {
      stop();
    }

    frame 3 {
      init();
    }

    frame 4 {
      doeffect();
    }

    frame 5 {
      gotoAndPlay(4);
    }
  }

  movieClip 74  {
  }

  movieClip 75  {

    frame 2 {
      stop();
    }

    frame 3 {
      init();
    }

    frame 4 {
      doeffect();
    }

    frame 5 {
      gotoAndPlay(4);
    }
  }

  movieClip 78  {
  }

  movieClip 79  {

    frame 2 {
      stop();
    }

    frame 3 {
      init();
    }

    frame 4 {
      doeffect();
    }

    frame 5 {
      gotoAndPlay(4);
    }
  }

  movieClip 80  {

    frame 1 {
      function letterinit() {
        this._visible = true;
        this.speed = this._parent.speed;
        this._xscale = this._parent.scale;
        this._yscale = this._parent.scale;
        this._alpha = this._parent.alpha;
        this.alphaspeed = this._parent.alphaspeed;
      }

      function effect() {
        this._xscale -= this.speed;
        this._yscale -= this.speed;
        this._alpha += this.alphaspeed;
        if (100 >= this._xscale) {
          this._xscale = 100;
          this._yscale = 100;
          this._alpha = 100;
          this.gotoandstop('end');
        }
      }

      function shuffle() {
        return math.floor(math.random() * 3) - 1;
      }

      numchar = 3;
      speed = 300;
      random = 0;
      reverse = 0;
      alpha = 0;
      delay = 400;
      loop = 0;
      loopdelay = 0;
      waitcharend = 0;
      scale = 3000;
      mcn = 'letter';
      alphaspeed = math.floor((100 - alpha) / ((scale - 100) / speed));
      aletters = new array();
      i = 0;
      while (i < numchar) {
        aletters[i + 0] = i;
        var letter = this[mcn + i];
        letter._visible = false;
        letter.init = letterinit;
        letter.doeffect = effect;
        letter.number = i;
        ++i;
      }
      if (random == 1) {
        aletters.sort(shuffle);
      }
      if (reverse == 1) {
        aletters.reverse();
      }
    }

    frame 2 {
      i = 0;
      now = getTimer();
      loopnow = 0;
    }

    frame 3 {
      this[mcn + aletters[i]].gotoandplay(3);
      now = getTimer();
      i += 1;
      if (i == numchar) {
        gotoAndStop(7);
      }
    }

    frame 5 {
      if (waitcharend == 1) {
        if (this[mcn + aletters[i - 1]]._currentframe == this[mcn + aletters[i - 1]]._totalframes and now + delay < getTimer()) {
          gotoAndPlay(this._currentframe - 2);
        } else {
          gotoAndPlay(this._currentframe - 1);
        }
      } else {
        if (now + delay < getTimer()) {
          gotoAndPlay(this._currentframe - 2);
        } else {
          gotoAndPlay(this._currentframe - 1);
        }
      }
    }

    frame 7 {
      if (loop == 1) {
        if (loopnow != 1) {
          if (this[mcn + aletters[numchar - 1]]._currentframe == this[mcn + aletters[numchar - 1]]._totalframes) {
            loopnow = 1;
            now = getTimer();
          }
        }
        if (getTimer() >= now + loopdelay and loopnow == 1) {
          gotoAndPlay(2);
        } else {
          prevFrame();
          play();
        }
      } else {
        stop();
      }
    }
  }

  movieClip 82  {

    frame 1 {
      stop();
    }
  }

  movieClip 85  {

    frame 1 {
      stop();
    }
  }

  movieClip 89  {

    frame 1 {
      stop();
    }

    frame 2 {
      if (!_root.m.soundflag) {
        gotoAndStop(1);
      }
    }
  }

  movieClip 93  {

    frame 1 {
      stop();
    }

    frame 2 {
      if (!_root.m.soundflag) {
        gotoAndStop(1);
      }
    }
  }

  movieClip 96  {

    frame 1 {
      stop();
    }

    frame 2 {
      if (!_root.m.soundflag) {
        gotoAndStop(1);
      }
    }
  }

  movieClip 99  {

    frame 1 {
      stop();
    }
  }

  movieClip 102  {

    frame 1 {
      stop();
    }

    frame 2 {
      if (!_root.m.soundflag) {
        gotoAndStop(1);
      }
    }
  }

  movieClip 105  {

    frame 1 {
      stop();
    }

    frame 2 {
      if (!_root.m.soundflag) {
        gotoAndStop(1);
      }
    }
  }

  movieClip 109  {

    frame 1 {
      stop();
    }

    frame 2 {
      if (!_root.m.soundflag) {
        gotoAndStop(1);
      }
    }
  }

  movieClip 111  {
  }

  movieClip 113  {

    frame 1 {
      stop();
    }
  }

  movieClip 119  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 3 {
      stop();
    }

    frame 4 {
      stop();
    }

    frame 5 {
      stop();
    }
  }

  movieClip 120  {
  }

  movieClip 122  {
  }

  movieClip 123  {
  }

  movieClip 126  {
  }

  movieClip 127  {
  }

  movieClip 133  {

    frame 1 {
      stop();
    }
  }

  movieClip 139  {

    frame 1 {
      stop();
    }
  }

  movieClip 146  {

    frame 1 {
      stop();
    }
  }

  movieClip 153  {

    frame 1 {
      stop();
    }
  }

  movieClip 159  {

    frame 1 {
      stop();
    }
  }

  movieClip 165  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }
  }

  movieClip 166  {

    instance mc8 of movieClip 159  {

      onClipEvent (release) {
        _root.as.resign();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    frame 2 {
      stop();
    }

    frame 3 {
      stop();
    }

    instance mc6 of movieClip 133  {

      onClipEvent (release) {
        _root.as.r_back();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance mc7 of movieClip 139  {

      onClipEvent (release) {
        _root.as.r_forward();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance mc11 of movieClip 146  {

      onClipEvent (release) {
        _root.as.r_start();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance mc12 of movieClip 153  {

      onClipEvent (release) {
        _root.as.r_end();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }
  }

  movieClip 169  {
  }

  movieClip 219  {

    frame 11 {
      gotoAndPlay(1);
    }

    frame 45 {
      if (_root.as.cpufirst) {
        _root.as.think();
      }
    }

    frame 50 {
      stop();
    }

    frame 68 {
      gotoAndStop(50);
    }

    frame 93 {
      gotoAndStop(50);
    }

    frame 118 {
      gotoAndStop(50);
    }

    frame 148 {
      gotoAndStop(50);
    }

    frame 216 {
      gotoAndPlay(149);
    }
  }

  movieClip 227  {

    frame 24 {
      _root.h._visible = true;
      this._visible = false;
      this.stop();
    }
  }

  movieClip 233  {

    frame 1 {
      stop();
    }
  }

  movieClip 239  {

    frame 1 {
      stop();
    }
  }

  movieClip 245  {

    frame 1 {
      stop();
    }
  }

  movieClip 251  {

    frame 1 {
      stop();
    }
  }

  movieClip 258  {

    frame 1 {
      stop();
      _root.as.guide = false;
      _root.as.hide_guide();
    }

    frame 2 {
      stop();
      _root.as.guide = true;
      _root.as.show_guide();
    }
  }

  movieClip 260  {
  }

  movieClip 321  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 16 {
      stop();
    }

    frame 17 {
      stop();
    }
  }

  movieClip 322  {
  }

  movieClip 324  {
  }

  movieClip 325  {

    instance p_type of movieClip 322  {

      onClipEvent (release) {
        _root.as.ll = this.ll;
        if (0 < this.ll) {
          _root.as.pick();
        }
      }
    }
  }

  movieClip 386  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 16 {
      stop();
    }

    frame 17 {
      stop();
    }
  }

  movieClip 447  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 16 {
      stop();
    }

    frame 17 {
      stop();
    }
  }

  movieClip 508  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 16 {
      stop();
    }

    frame 17 {
      stop();
    }
  }

  movieClip 510  {

    instance aa of movieClip 447  {

      onClipEvent (release) {
        _root.as.choose(0);
      }
    }

    instance bb of movieClip 508  {

      onClipEvent (release) {
        _root.as.choose(1);
      }
    }
  }

  movieClip 516  {

    frame 1 {
      stop();
    }
  }

  movieClip 522  {

    frame 1 {
      stop();
    }
  }

  movieClip 528  {

    frame 1 {
      stop();
    }
  }

  movieClip 534  {

    frame 1 {
      stop();
    }
  }

  movieClip 540  {

    frame 1 {
      stop();
    }
  }

  movieClip 546  {

    frame 1 {
      stop();
    }
  }

  movieClip 552  {

    frame 1 {
      stop();
    }
  }

  movieClip 558  {

    frame 1 {
      stop();
    }
  }

  movieClip 564  {

    frame 1 {
      stop();
    }
  }

  movieClip 570  {

    frame 1 {
      stop();
    }
  }

  movieClip 576  {

    frame 1 {
      stop();
    }
  }

  movieClip 582  {

    frame 1 {
      stop();
    }
  }

  movieClip 588  {

    frame 1 {
      stop();
    }
  }

  movieClip 592  {
  }

  movieClip 597  {
  }

  movieClip 603  {

    frame 1 {
      stop();
    }
  }

  movieClip 609  {

    frame 1 {
      stop();
    }
  }

  button 611 {

    on (release) {
      _root.as.board_num = -1;
      _root.as.setup();
    }
  }

  movieClip 615  {

    instance mc1 of movieClip 516  {

      onClipEvent (release) {
        _root.as.board_num = 8;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[123];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc2 of movieClip 522  {

      onClipEvent (release) {
        _root.as.board_num = 0;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[121];
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc3 of movieClip 528  {

      onClipEvent (release) {
        _root.as.board_num = 9;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[123];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc4 of movieClip 534  {

      onClipEvent (release) {
        _root.as.board_num = 10;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[123];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc5 of movieClip 540  {

      onClipEvent (release) {
        _root.as.board_num = 11;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[123];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc6 of movieClip 546  {

      onClipEvent (release) {
        _root.as.board_num = 13;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[123];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc7 of movieClip 552  {

      onClipEvent (release) {
        _root.as.board_num = 14;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[124];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc8 of movieClip 558  {

      onClipEvent (release) {
        _root.as.board_num = 1;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[122];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc9 of movieClip 564  {

      onClipEvent (release) {
        _root.as.board_num = 2;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[122];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc10 of movieClip 570  {

      onClipEvent (release) {
        _root.as.board_num = 3;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[122];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc11 of movieClip 576  {

      onClipEvent (release) {
        _root.as.board_num = 4;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[122];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc12 of movieClip 582  {

      onClipEvent (release) {
        _root.as.board_num = 5;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[122];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc13 of movieClip 588  {

      onClipEvent (release) {
        _root.as.board_num = 6;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[122];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc17 of movieClip 603  {

      onClipEvent (release) {
        _root.as.board_num = 7;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[125];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }

    instance mc18 of movieClip 609  {

      onClipEvent (release) {
        _root.as.board_num = 12;
        _root.as.setup();
      }

      onClipEvent (rollOver) {
        _root.s.ms._visible = true;
        _root.s.ms.txt1 = _root.m.smsg[123];
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        _root.s.ms._visible = false;
        this.gotoandstop(1);
      }
    }
  }

  movieClip 676  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 16 {
      stop();
    }

    frame 17 {
      stop();
    }
  }

  movieClip 1065  {

    frame 1 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 2 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 3 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 4 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 5 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 6 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 7 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 8 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 9 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 10 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 11 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 12 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 13 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 14 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 15 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 16 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 17 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 18 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 19 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 20 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 21 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 22 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 23 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 24 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 25 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 26 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 27 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 28 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 29 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 30 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 31 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 32 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 33 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 34 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe];
    }

    frame 35 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 36 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 37 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 38 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 39 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 40 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 41 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 42 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 43 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 44 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 45 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 46 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 47 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 48 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 49 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 50 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 51 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 52 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 53 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 54 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 55 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 56 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 57 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }

    frame 58 {
      this.stop();
      _root.j.txt1 = _root.m.smsg[this._currentframe + 33];
    }
  }

  movieClip 1071  {

    frame 1 {
      stop();
    }
  }

  movieClip 1077  {

    frame 1 {
      stop();
    }
  }

  movieClip 1084  {

    frame 1 {
      stop();
    }
  }

  movieClip 1090  {

    frame 1 {
      stop();
    }
  }

  movieClip 1095  {

    frame 1 {
      stop();
    }
  }

  movieClip 1100  {

    frame 1 {
      stop();
    }
  }

  movieClip 1105  {

    frame 1 {
      stop();
    }
  }

  movieClip 1110  {

    frame 1 {
      stop();
    }
  }

  movieClip 1115  {

    frame 1 {
      stop();
    }
  }

  movieClip 1120  {

    frame 1 {
      stop();
    }
  }

  movieClip 1121  {

    instance b1 of movieClip 1095  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.p = 1;
        _root.j.nextframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance b2 of movieClip 1100  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.p = 10;
        _root.j.nextframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance b3 of movieClip 1105  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.p = 21;
        _root.j.nextframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance b4 of movieClip 1110  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.p = 29;
        _root.j.nextframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance b5 of movieClip 1115  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.p = 33;
        _root.j.nextframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance b6 of movieClip 1120  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.p = 39;
        _root.j.nextframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }
  }

  movieClip 1126  {
  }

  movieClip 1157  {

    frame 1 {
      this.stop();
      _root.j.bb._visible = true;
    }

    instance mc12 of movieClip 1090  {

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }

      onClipEvent (release) {
        _root.s5.play();
        _root.s._visible = _root.as.opening;
        _root.j._visible = false;
      }
    }

    frame 2 {
      this.stop();
      _root.j.kh.gotoandstop(this.p);
      _root.j.txt2 = this.p + '/58';
      _root.j.bb._visible = false;
    }

    instance mc8 of movieClip 1071  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.kh.prevframe();
        _root.j.txt2 = _root.j.kh._currentframe + '/58';
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance mc9 of movieClip 1077  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.kh.nextframe();
        _root.j.txt2 = _root.j.kh._currentframe + '/58';
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }

    instance mc10 of movieClip 1084  {

      onClipEvent (release) {
        _root.s5.play();
        _root.j.prevframe();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }
    }
  }

  movieClip 1160  {
  }

  movieClip 1163  {
  }

  movieClip 1166  {
  }

  movieClip 1169  {
  }

  movieClip 1172  {
  }

  movieClip 1175  {
  }

  movieClip 1178  {
  }

  movieClip 1181  {
  }

  movieClip 1184  {
  }

  movieClip 1187  {
  }

  movieClip 1190  {
  }

  movieClip 1193  {
  }

  movieClip 1196  {
  }

  movieClip 1199  {
  }

  movieClip 1205  {

    frame 1 {
      stop();
    }
  }

  movieClip 1210  {
  }

  movieClip 1242  {

    frame 1 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 2 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 3 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 4 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 5 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 6 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 7 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 8 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 9 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 10 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 11 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 12 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 13 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }

    frame 14 {
      this.stop();
      this.txt5 = _root.m.smsg[53 + this._currentframe];
    }
  }

  movieClip 1246  {
  }

  movieClip 1261  {

    instance mc2 of movieClip 1160  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(1);
      }
    }

    instance mc3 of movieClip 1163  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(2);
      }
    }

    instance mc4 of movieClip 1166  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(3);
      }
    }

    instance mc5 of movieClip 1169  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(4);
      }
    }

    instance mc6 of movieClip 1172  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(5);
      }
    }

    instance mc7 of movieClip 1175  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(6);
      }
    }

    instance mc8 of movieClip 1178  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(7);
      }
    }

    instance mc9 of movieClip 1181  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(8);
      }
    }

    instance mc10 of movieClip 1184  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(9);
      }
    }

    instance mc11 of movieClip 1187  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(10);
      }
    }

    instance mc12 of movieClip 1190  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(11);
      }
    }

    instance mc13 of movieClip 1193  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(12);
      }
    }

    instance mc14 of movieClip 1196  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(13);
      }
    }

    instance mc15 of movieClip 1199  {

      onClipEvent (rollOver) {
        _root.ru.c._x = this._x;
        _root.ru.c._y = this._y;
        _root.ru.kk.gotoandstop(14);
      }
    }

    instance mc17 of movieClip 1205  {

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }

      onClipEvent (release) {
        _root.s5.play();
        _root.s._visible = _root.as.opening;
        _root.ru._visible = false;
      }
    }
  }

  movieClip 1267  {

    frame 1 {
      stop();
    }
  }

  movieClip 1333  {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 16 {
      stop();
    }

    frame 17 {
      stop();
    }
  }

  movieClip 1350  {

    frame 43 {
      gotoAndPlay(1);
    }

    frame 78 {
      if (_root.as.qcnt >= 14) {
        if (_root.as.qcnt < 30) {
          _root.tr.next._visible = true;
          this.gotoandplay(1);
        } else {
          this.gotoandstop('sit');
        }
      } else {
        _root.as.next_question();
        this.gotoandplay(1);
      }
    }
  }

  movieClip 1354  {
  }

  button 1377 {

    on (release) {
      _root.as.next_question();
    }
  }

  movieClip 1380  {

    instance mc17 of movieClip 1267  {

      onClipEvent (rollOver) {
        _root.s4.play();
        this.gotoandstop(2);
      }

      onClipEvent (rollOut) {
        this.gotoandstop(1);
      }

      onClipEvent (release) {
        _root.s5.play();
        _root.s._visible = _root.as.opening;
        _root.tr._visible = false;
      }
    }

    instance gg of movieClip 1333  {

      onClipEvent (release) {
        _root.as.qy = this.qy;
        _root.as.qx = this.qx;
        _root.as.question();
      }
    }

    instance next of movieClip 1354  {

      onClipEvent (release) {
        _root.s5.play();
        this._visible = false;
        _root.as.next_question();
      }

      onClipEvent (rollOver) {
        _root.s4.play();
      }
    }
  }

  button 1382 {

    on (release) {
      _root.as.show_kiki_u();
    }
  }

  movieClip 1387  {
  }

  movieClip 1394  {

    frame 1 {
      stop();
      _root.m.soundflag = true;
    }

    frame 2 {
      stop();
      _root.m.soundflag = false;
    }
  }

  movieClip 1396  {

    frame 215 {
      this.stop();
      this._visible = false;
    }
  }

  movieClip 1403  {

    frame 1 {
      stop();
      _root.m.soundflag = true;
    }

    frame 2 {
      stop();
      _root.m.soundflag = false;
    }
  }

  frame 3 {
    stop();
  }

  instance m of movieClip 111  {

    onClipEvent (load) {
      loader_lv = new loadvars();
      rank = 0;
      won = 0;
      wm = [];
      soundflag = true;
      loader_lv.onload = function () {
        smsg = loader_lv.msg.split(',');
        _root.txt4 = smsg[51];
        _root.txt5 = smsg[52];
        _root.nextframe();
      };

      loader_lv.load('smsg.txt');
    }
  }

  instance mc44 of movieClip 1394  {

    onClipEvent (release) {
      this.play();
    }
  }

  frame 4 {
    nextFrame();
  }

  instance g of movieClip 258  {

    onClipEvent (release) {
      _root.s5.play();
      this.play();
    }

    onClipEvent (rollOver) {
      _root.s4.play();
    }
  }

  frame 5 {
    stop();
  }

  instance as of movieClip 113  {

    onClipEvent (load) {
      _root.stop();
      _root.m.loader_lv.onload = function () {
        tmp_score = [];
        tmp_score = _root.m.loader_lv.s.split(',');
        w_m = parseint(tmp_score[0], 10);
        w_h = parseint(tmp_score[1], 10);
        _root.s.txt1 = _root.m.smsg[126] + w_m.tostring() + _root.m.smsg[127] + w_h.tostring() + _root.m.smsg[128];
      };

      _root.m.loader_lv.load('./cgi-bin/shogi_score.txt?' + new date());CARE: これ
      function test() {}

      masu = 9;
      k_width = 34;
      k_offset_x = 135;
      k_offset_y = 30;
      ob = 64;
      kan = 64;
      fu = 1;
      ky = 2;
      ke = 3;
      gi = 4;
      ki = 5;
      ka = 6;
      hi = 7;
      ou = 8;
      promoted = 8;
      to = promoted + fu;
      ny = promoted + ky;
      nk = promoted + ke;
      ng = promoted + gi;
      um = promoted + ka;
      ry = promoted + hi;
      enemy = 16;
      efu = enemy + fu;
      eky = enemy + ky;
      eke = enemy + ke;
      egi = enemy + gi;
      eki = enemy + ki;
      eka = enemy + ka;
      ehi = enemy + hi;
      eou = enemy + ou;
      eto = enemy + to;
      eny = enemy + ny;
      enk = enemy + nk;
      eng = enemy + ng;
      eum = enemy + um;
      ery = enemy + ry;
      moji = [0, 'FU', 'KY', 'KE', 'GI', 'KI', 'KA', 'HI', 'OU', 'TO', 'NY', 'NK', 'NG', 0, 'UM', 'RY'];
      can_x = [[0], [0], [0], [-1, 1], [-1, 0, 1, -1, 1], [-1, 0, 1, -1, 1, 0], [0], [0], [-1, 0, 1, -1, 1, -1, 0, 1], [-1, 0, 1, -1, 1, 0], [-1, 0, 1, -1, 1, 0], [-1, 0, 1, -1, 1, 0], [-1, 0, 1, -1, 1, 0], [0], [0, -1, 1, 0], [-1, 1, -1, 1]];
      can_y = [[0], [-1], [0], [-2, -2], [-1, -1, -1, 1, 1], [-1, -1, -1, 0, 0, 1], [0], [0], [-1, -1, -1, 0, 0, 1, 1, 1], [-1, -1, -1, 0, 0, 1], [-1, -1, -1, 0, 0, 1], [-1, -1, -1, 0, 0, 1], [-1, -1, -1, 0, 0, 1], [0], [-1, 0, 0, 1], [-1, -1, 1, 1]];
      can_n = [0, 1, 0, 2, 5, 6, 0, 0, 8, 6, 6, 6, 6, 0, 4, 4];
      tobi = [[[0, -1], [1, 0], [0, 1], [-1, 0]], [[-1, -1], [1, -1], [1, 1], [-1, 1]]];
      tobikoe = [[[1, 2, 0, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2], [0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2], [0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2], [0, 0, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 2]], [[0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 1], [0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 1], [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1], [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1]]];
      tobikoma = [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1];
      kingin = [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1];
      point = [[0, 20, 86, 86, 130, 138, 220, 265, 290, 30, 106, 109, 131, 0, 240, 285], [0, 10, 43, 45, 130, 160, 220, 265, 290, 20, 53, 54, 131, 0, 240, 285]];
      promote_point = [0, 32, 20, 19, 3, 0, 32, 37];
      uti = [1, 1, 3, 1, 3, 4, 16, 18];
      board0 = [[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]];
      board1 = [[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]];
      board = [[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]];
      board_k = [[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]];
      board_d0 = [[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]];
      board_d1 = [[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64], [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]];
      board_def = [[22, 18, 14, 10, 2, 8, 12, 16, 20], [0, 4, 0, 0, 0, 0, 0, 6, 0], [40, 38, 36, 34, 32, 30, 28, 26, 24], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [23, 25, 27, 29, 31, 33, 35, 37, 39], [0, 5, 0, 0, 0, 0, 0, 3, 0], [19, 15, 11, 7, 1, 9, 13, 17, 21]];
      board_t = [[0, 0, 0, 0, 0, 0, 0, 0, ki], [0, 0, 0, ry, 0, eka, 0, 0, 0], [efu, 0, efu, efu, efu, efu, egi, efu, efu], [0, 0, 0, 0, 0, 0, efu, 0, 0], [0, 0, 0, 0, 0, 0, eke, 0, fu], [0, 0, 0, 0, 0, 0, gi, 0, 0], [fu, eky, eki, fu, eum, fu, fu, fu, 0], [0, 0, 0, ery, 0, ke, ou, 0, 0], [0, 0, 0, 0, 0, ki, gi, ke, ky]];
      motigoma = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      motigoma0 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      motigoma1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      motigoma_t = [0, 3, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0];
      motigoma_u = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
      motigoma_u0 = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
      motigoma_u1 = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
      boards = [[[0, 5, 0, 0, 0, 0, 0, 3, 0], [19, 15, 11, 7, 1, 9, 13, 17, 21]], [[0, 5, 0, 0, 0, 0, 0, 3, 0], [19, 15, 11, 0, 1, 0, 13, 17, 21]], [[0, 5, 0, 0, 0, 0, 0, 3, 0], [19, 15, 0, 0, 1, 0, 0, 17, 21]], [[0, 5, 0, 0, 0, 0, 0, 3, 0], [19, 0, 0, 0, 1, 0, 0, 0, 21]], [[0, 5, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]], [[22, 18, 14, 0, 2, 0, 12, 16, 20], [0, 4, 0, 0, 0, 0, 0, 6, 0]], [[22, 18, 0, 0, 2, 0, 0, 16, 20], [0, 4, 0, 0, 0, 0, 0, 6, 0]], [[22, 0, 0, 0, 2, 0, 0, 0, 20], [0, 4, 0, 0, 0, 0, 0, 6, 0]], [[0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 6, 0]], [[0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0]], [[0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]];
      kiki = [[], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]];
      kiki0 = [[], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]];
      kiki1 = [[], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]];
      kiki_u = [[], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]]];
      kiki_u0 = [[], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]]];
      kiki_u1 = [[], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]]];
      yose = [[], [[0, 1, 0], [0, 0, 0], [0, 0, 0]], [[0, 1, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[1, 1, 1], [0, 0, 0], [1, 0, 1]], [[1, 1, 1], [1, 0, 1], [0, 1, 0]], [[1, 0, 1], [0, 0, 0], [1, 0, 1]], [[0, 1, 0], [1, 0, 1], [0, 1, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[1, 1, 1], [1, 0, 1], [0, 1, 0]], [[1, 1, 1], [1, 0, 1], [0, 1, 0]], [[1, 1, 1], [1, 0, 1], [0, 1, 0]], [[1, 1, 1], [1, 0, 1], [0, 1, 0]], [[1, 1, 1], [1, 0, 1], [0, 1, 0]], [[1, 1, 1], [1, 0, 1], [1, 1, 1]], [[1, 1, 1], [1, 0, 1], [1, 1, 1]]];
      kiki_sum = [0, 0];
      kiki_sum0 = [0, 0];
      kiki_sum1 = [0, 0];
      oumawari = [[15, 15, 15], [20, 100, 20], [30, 40, 30]];
      koma = [[-1, 0, 0, 0], [-1, 0, ou, 0], [-1, 0, eou, 0], [-1, 0, hi, 0], [-1, 0, ehi, 0], [-1, 0, ka, 0], [-1, 0, eka, 0], [-1, 0, ki, 0], [-1, 0, eki, 0], [-1, 0, ki, 0], [-1, 0, eki, 0], [-1, 0, gi, 0], [-1, 0, egi, 0], [-1, 0, gi, 0], [-1, 0, egi, 0], [-1, 0, ke, 0], [-1, 0, eke, 0], [-1, 0, ke, 0], [-1, 0, eke, 0], [-1, 0, ky, 0], [-1, 0, eky, 0], [-1, 0, ky, 0], [-1, 0, eky, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0], [-1, 0, fu, 0], [-1, 0, efu, 0]];
      koma0 = [[0, 0, 0, 0], [0, 0, ou, 0], [0, 0, eou, 0], [0, 0, hi, 0], [0, 0, ehi, 0], [0, 0, ka, 0], [0, 0, eka, 0], [0, 0, ki, 0], [0, 0, eki, 0], [0, 0, ki, 0], [0, 0, eki, 0], [0, 0, gi, 0], [0, 0, egi, 0], [0, 0, gi, 0], [0, 0, egi, 0], [0, 0, ke, 0], [0, 0, eke, 0], [0, 0, ke, 0], [0, 0, eke, 0], [0, 0, ky, 0], [0, 0, eky, 0], [0, 0, ky, 0], [0, 0, eky, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0]];
      koma1 = [[0, 0, 0, 0], [0, 0, ou, 0], [0, 0, eou, 0], [0, 0, hi, 0], [0, 0, ehi, 0], [0, 0, ka, 0], [0, 0, eka, 0], [0, 0, ki, 0], [0, 0, eki, 0], [0, 0, ki, 0], [0, 0, eki, 0], [0, 0, gi, 0], [0, 0, egi, 0], [0, 0, gi, 0], [0, 0, egi, 0], [0, 0, ke, 0], [0, 0, eke, 0], [0, 0, ke, 0], [0, 0, eke, 0], [0, 0, ky, 0], [0, 0, eky, 0], [0, 0, ky, 0], [0, 0, eky, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0]];
      koma_def = [[0, 0, 0, 0], [0, 0, ou, 0], [0, 0, eou, 0], [0, 0, hi, 0], [0, 0, ehi, 0], [0, 0, ka, 0], [0, 0, eka, 0], [0, 0, ki, 0], [0, 0, eki, 0], [0, 0, ki, 0], [0, 0, eki, 0], [0, 0, gi, 0], [0, 0, egi, 0], [0, 0, gi, 0], [0, 0, egi, 0], [0, 0, ke, 0], [0, 0, eke, 0], [0, 0, ke, 0], [0, 0, eke, 0], [0, 0, ky, 0], [0, 0, eky, 0], [0, 0, ky, 0], [0, 0, eky, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0], [0, 0, fu, 0], [0, 0, efu, 0]];
      q_kiki = [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]];
      q_num = [1, 9, 2, 10, 3, 11, 4, 12, 5, 6, 14, 7, 15, 8];
      q_kiki_num = [[0, 0], [4, 4], [1, 1], [4, 4], [2, 2], [4, 4], [3, 3], [4, 4], [4, 4], [5, 5], [5, 7], [6, 6], [6, 7], [7, 7]];
      q_board = [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, eke, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, fu, 0, fu, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, eou, 0, 0, 0], [0, 0, ehi, 0, 0, 0, 0], [0, ka, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, egi, eke, eky], [0, 0, 0, 0, 0, efu, 0], [0, 0, 0, 0, efu, 0, efu], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, hi, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, eou, eki, 0, 0], [0, 0, 0, 0, 0, egi, ry], [0, 0, 0, efu, efu, efu, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, ehi, 0, 0], [0, 0, 0, 0, eka, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [ehi, 0, fu, 0, 0, 0, 0], [0, fu, gi, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, ke, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, ehi, 0, eka, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, ehi, 0, eou, 0], [0, 0, 0, efu, efu, efu, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [ka, 0, 0, 0, 0, 0, 0]], [[0, ehi, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, eki, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[eky, eke, 0, 0, 0, 0, 0], [0, eou, eki, 0, 0, hi, 0], [efu, efu, efu, efu, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, ehi, 0, 0, 0, 0], [0, 0, 0, 0, eka, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, eou, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, fu, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, ehi, egi, 0, 0, 0, 0], [0, 0, efu, 0, eki, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[eky, eke, 0, 0, 0, 0, 0], [0, 0, egi, 0, 0, 0, 0], [efu, efu, efu, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, eou, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, efu, efu, efu, efu, 0], [0, eka, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, ka, eke, eky], [0, 0, 0, 0, 0, 0, eou], [0, 0, 0, 0, efu, efu, 0], [0, 0, 0, 0, 0, 0, efu], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]];
      q_answer = [[3, 4], [2, 2], [1, 4], [3, 6], [3, 4], [4, 0], [3, 2], [3, 4], [1, 2], [0, 3], [2, 3], [1, 3], [0, 2], [1, 1], [0, 1], [1, 4]];
      q_msg = [38, 39, 40, 41, 42, 43, 42, 44, 45, 46, 42, 48, 45, 49, 47, 50];
      r_x_from = [-1, 0];
      r_x_to = [-1, 0];
      r_y_from = [0, 0];
      r_y_to = [0, 0];
      r_capture = [0, 0];
      r_promote = [0, 0];
      rireki_y = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      rireki_x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      rireki_h = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      narikoma = 0;
      cnt = 20;
      _root.p._visible = false;
      _root.kifu._visible = false;
      _root.h_cheese._visible = false;
      _root.ru._visible = false;
      _root.j._visible = false;
      _root.tr._visible = false;
      pause = true;
      game_over = false;
      opening = true;
      cpufirst = true;
      syuban = 0;
      checked = 0;
      c_flag = false;
      m_flag = false;
      m_win = false;
      if (_root.g._currentframe == 1) {
        guide = false;
      } else {
        guide = true;
      }
      teban = 0;
      tesu = 0;
      _root.t = tesu;
      tesu_max = tesu;
      board_num = 0;
      winner = 0;
      zzz = false;
      zzz_cnt = 0;
      qcnt = 0;
      function setup() {
        if (_root.m.soundflag) {
          _root.s2.play();
        }
        var obj;
        var obj2;
        var obj3;
        var i;
        var i;
        var k = 10;
        var kk = 1000;
        var l;
        var m;
        var used = [];
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            _root.k.p_type.duplicatemovieclip('_' + i + '_' + j, k);
            _root.k.shade.duplicatemovieclip('s' + i + '_' + j, kk);
            _root.f.p_type.duplicatemovieclip('_' + i + '_' + j, k);
            obj = _root.k['_' + i + '_' + j];
            obj2 = _root.k['s' + i + '_' + j];
            obj3 = _root.f['_' + i + '_' + j];
            obj._x = (j - 1) * k_width + k_offset_x;
            obj2._x = (j - 1) * k_width + k_offset_x;
            obj3._x = (j - 1) * k_width + k_offset_x;
            obj._y = (i - 1) * k_width + k_offset_y;
            obj2._y = (i - 1) * k_width + k_offset_y;
            obj3._y = (i - 1) * k_width + k_offset_y;
            if (board_num == -1) {
              l = board_t[i - 1][j - 1];
              if (l) {
                if (l == ou) {
                  board[i][j] = 1;
                } else {
                  if (l == eou) {
                    board[i][j] = 2;
                  } else {
                    if (l & enemy) {
                      l -= enemy;
                    }
                    if (l & promoted) {
                      l -= promoted;
                    }
                    m = 1;
                    while (40 >= m) {
                      if (koma[m][2] % enemy == l) {
                        if (used[m] != 1) {
                          used[m] = 1;
                          board[i][j] = m;
                          koma[m][2] = board_t[i - 1][j - 1];
                          break;
                        }
                      }
                      ++m;
                    }
                  }
                }
              }
            } else {
              board[i][j] = board_def[i - 1][j - 1];
            }
            board0[i][j] = board[i][j];
            l = koma[board[i][j]][2];
            if (l == 0) {
              obj._visible = false;
            } else {
              obj.g.gotoandstop(l);
            }
            obj.b._visible = false;
            obj.ll = 0;
            obj2._visible = false;
            ++k;
            ++kk;
            ++j;
          }
          ++i;
        }
        if (0 < board_num) {
          i = 1;
          while (2 >= i) {
            if (board_num < 8) {
              m = i + 7;
            } else {
              m = i;
            }
            j = 1;
            while (9 >= j) {
              board[m][j] = boards[board_num][i - 1][j - 1];
              l = board[m][j];
              board0[m][j] = l;
              obj = _root.k['_' + m + '_' + j];
              if (l == 0) {
                obj._visible = false;
              }
              ++j;
            }
            ++i;
          }
        }
        if (board_num == 14) {
          i = 1;
          while (9 >= i) {
            board[3][i] = 0;
            board0[3][i] = 0;
            _root.k['_3_' + i]._visible = false;
            ++i;
          }
        }
        if (board_num == 7) {
          i = 1;
          while (9 >= i) {
            board[7][i] = 0;
            board0[7][i] = 0;
            _root.k['_7_' + i]._visible = false;
            ++i;
          }
        }
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            if (board[i][j]) {
              koma[board[i][j]][0] = i;
              koma[board[i][j]][1] = j;
            }
            ++j;
          }
          ++i;
        }
        if (board_num == -1) {
          i = 0;
          while (i < 24) {
            motigoma[i] = motigoma_t[i];
            if (motigoma[i]) {
              l = 1;
              while (motigoma[i] >= l) {
                j = 1;
                while (40 >= j) {
                  if (koma[j][2] % enemy == i % enemy) {
                    if (used[j] != 1) {
                      used[j] = 1;
                      motigoma_u[i][l] = j;
                      koma[j][2] = i;
                      break;
                    }
                  }
                  ++j;
                }
                ++l;
              }
            }
            ++i;
          }
        }
        i = 0;
        while (i < 4) {
          j = 0;
          while (j < 2) {
            l = 7 - (i * 2 + j);
            if (0 < l) {
              _root.k.p_type.duplicatemovieclip('_0_' + l, k);
              obj = _root.k['_0_' + l];
              obj._x = j * k_width * 1.5 + k_offset_x + k_width * 9.300000190734863;
              obj._y = i * k_width + k_offset_y + k_width * 5;
              obj.g.gotoandstop(l);
              obj.b._visible = false;
              if (motigoma[l]) {
                obj._visible = true;
              } else {
                obj._visible = false;
              }
              obj.ll = l;
              _root.n.p_type.duplicatemovieclip('_' + l, k);
              obj = _root.n['_' + l];
              obj._x = j * k_width * 1.5 + k_offset_x + k_width * 10.30000019073486;
              obj._y = i * k_width + k_offset_y + k_width * 5;
              obj._visible = false;
              ++k;
            }
            ++j;
          }
          ++i;
        }
        i = 0;
        while (i < 4) {
          j = 0;
          while (j < 2) {
            l = 7 - (i * 2 + j);
            m = l + enemy;
            if (0 < l) {
              _root.k.p_type.duplicatemovieclip('_0_' + m, k);
              obj = _root.k['_0_' + m];
              obj._x = (1 - j) * k_width * 1.5 + k_offset_x - k_width * 3.200000047683716;
              obj._y = (3 - i) * k_width + k_offset_y;
              obj.g.gotoandstop(m);
              obj.b._visible = false;
              if (motigoma[m]) {
                obj._visible = true;
              } else {
                obj._visible = false;
              }
              obj.ll = 0;
              _root.n.p_type.duplicatemovieclip('_' + m, k);
              obj = _root.n['_' + m];
              obj._x = (1 - j) * k_width * 1.5 + k_offset_x - k_width * 2.200000047683716;
              obj._y = (3 - i) * k_width + k_offset_y;
              obj._visible = false;
              ++k;
            }
            ++j;
          }
          ++i;
        }
        _root.k.p_type.swapdepths(300);
        _root.k.p_type.b._visible = false;
        _root.k.p_type.ll = 0;
        calc_kiki();
        _root.s._visible = false;
        if (board_num < 8) {
          pause = false;
          cpufirst = false;
        }
        if (board_num == 0) {
          if (math.random() * 2 < 1) {
            pause = true;
            cpufirst = true;
          }
        }
        if (pause and guide) {
          show_guide();
        }
        opening = false;
        _root.h.gotoandplay('peko');
      }

      function setup_line() {
        var i;
        var j;
        var k = 10;
        var obj;
        i = 0;
        while (i < masu + 1) {
          _root.l.p_type.duplicatemovieclip('_' + i, k);
          obj = _root.l['_' + i];
          obj._x = (i - 0.5) * k_width + k_offset_x;
          obj._y = k_width * 4 + k_offset_y;
          ++k;
          ++i;
        }
        i = 0;
        while (i < masu + 1) {
          _root.l.p_type.duplicatemovieclip('__' + i, k);
          obj = _root.l['__' + i];
          obj._y = (i - 0.5) * k_width + k_offset_y;
          obj._x = k_width * 4 + k_offset_x;
          obj._rotation = 90;
          ++k;
          ++i;
        }
        i = 0;
        while (i < 7) {
          j = 0;
          while (j < 7) {
            _root.tr.gg.duplicatemovieclip('_' + i + '_' + j, k);
            obj = _root.tr['_' + i + '_' + j];
            obj._x += k_width * j;
            obj._y += k_width * i;
            obj.gotoandstop(33);
            obj.qy = i;
            obj.qx = j;
            ++k;
            ++j;
          }
          ++i;
        }
        i = 0;
        while (i < 15) {
          _root.s.wm.duplicatemovieclip('_' + i, k);
          obj = _root.s['_' + i];
          if (7 < i) {
            obj._x += 128;
          }
          obj._y -= (i % 8) * 25;
          if (_root.m.wm[i] == 1) {
            obj._visible = true;
          } else {
            obj._visible = false;
          }
          ++k;
          ++i;
        }
        _root.s.wm._visible = false;
        _root.tr._3_3.gotoandstop(1);
        _root.tr.txt1 = _root.m.smsg[35];
        _root.tr.txt2 = '1/30';
        _root.tr.gg._visible = false;
        _root.tr.gg._x += 270;
        _root.tr.gg._y += 203;
        _root.tr.next._visible = false;
        _root.j.txt3 = _root.m.smsg[98];
        _root.j.bb.b1.txt2 = _root.m.smsg[92];
        _root.j.bb.b2.txt2 = _root.m.smsg[93];
        _root.j.bb.b3.txt2 = _root.m.smsg[94];
        _root.j.bb.b4.txt2 = _root.m.smsg[95];
        _root.j.bb.b5.txt2 = _root.m.smsg[96];
        _root.j.bb.b6.txt2 = _root.m.smsg[97];
        _root.l.p_type._visible = false;
        _root.k.p_type._visible = false;
        _root.k.shade._visible = false;
        _root.f.p_type._visible = false;
        _root.c._visible = false;
        _root.ru.txt1 = _root.m.smsg[99];
        _root.ru.txt4 = _root.m.smsg[100];
        _root.ru.txt2 = _root.m.smsg[101];
        _root.ru.txt5 = _root.m.smsg[102];
        _root.ru.txt3 = _root.m.smsg[103];
        _root.ru.txt6 = _root.m.smsg[104];
        _root.s.ms._visible = false;
        _root.w._visible = false;
      }

      function question() {
        var i;
        var j;
        var k;
        var q;
        var qk = [];
        var flag = true;
        if (qcnt < 14) {
          if (qy == 3 and qx == 3) {
            return undefined;
          }
          qk[0] = q_kiki_num[qcnt][0];
          qk[1] = q_kiki_num[qcnt][1];
          if (q_kiki[qk[0]][qy][qx] or q_kiki[qk[1]][qy][qx]) {
            _root.tr['_' + qy + '_' + qx].gotoandstop(34);
          } else {
            _root.tr['_' + qy + '_' + qx].gotoandstop(35);
          }
          i = 0;
          while (i < 2) {
            j = 0;
            while (j < 7) {
              k = 0;
              while (k < 7) {
                if (q_kiki[qk[i]][j][k]) {
                  if (_root.tr['_' + j + '_' + k]._currentframe != 34) {
                    flag = false;
                    break;
                  }
                }
                ++k;
              }
              ++j;
            }
            ++i;
          }
          if (flag) {
            _root.tr.txt1 = _root.m.smsg[36];
            _root.tr.ham.gotoandplay('yes');
            if (_root.m.soundflag) {
              _root.s0.play();
            }
          }
        } else {
          if (29 < qcnt) {
            return undefined;
          }
          if (_root.tr['_' + qy + '_' + qx]._currentframe != 33) {
            return undefined;
          }
          q = qcnt - 14;
          flag = false;
          if (qy == q_answer[q][0] and qx == q_answer[q][1]) {
            flag = true;
          }
          if (q == 4 and qy >= 3 and qx == 4) {
            flag = true;
          } else {
            if (q == 15 and qy == 1 and 4 >= qx) {
              flag = true;
            }
          }
          if (flag) {
            if (qcnt == 29) {
              ++qcnt;
            }
            _root.tr['_' + qy + '_' + qx].gotoandstop(_root.tr.gg._currentframe);
            _root.tr.gg._visible = false;
            _root.tr.txt1 = _root.m.smsg[36];
            _root.tr.txt3 = _root.m.smsg[q_msg[q]];
            _root.tr.ham.gotoandplay('yes');
            if (_root.m.soundflag) {
              _root.s0.play();
            }
          } else {
            _root.tr['_' + qy + '_' + qx].gotoandstop(35);
          }
        }
      }

      function next_question() {
        var i;
        var j;
        var k;
        var q;
        var r;
        if (29 < qcnt) {
          return undefined;
        }
        ++qcnt;
        q = qcnt + 1;
        _root.tr.txt2 = q + '/30';
        if (qcnt < 14) {
          _root.tr.txt1 = _root.m.smsg[35];
          i = 0;
          while (i < 7) {
            j = 0;
            while (j < 7) {
              _root.tr['_' + i + '_' + j].gotoandstop(33);
              ++j;
            }
            ++i;
          }
          _root.tr._3_3.gotoandstop(q_num[qcnt]);
        } else {
          q -= 15;
          k = math.floor((q - 2) / 2);
          if (k < 0) {
            k = 0;
          }
          i = 0;
          while (i < 7) {
            j = 0;
            while (j < 7) {
              r = q_board[q][i][j];
              if (r == 0) {
                r = 33;
              }
              _root.tr['_' + i + '_' + j].gotoandstop(r);
              ++j;
            }
            ++i;
          }
          _root.tr.gg.gotoandstop(k + 1);
          _root.tr.gg._visible = true;
          _root.tr.txt1 = _root.m.smsg[37];
          _root.tr.txt3 = '';
        }
      }

      function move() {
        if (pause or game_over or _root.ru._visible or _root.j._visible or _root.tr._visible) {
          return undefined;
        }
        jj = math.floor((_root._xmouse - k_offset_x + k_width * 0.5) / k_width);
        ii = math.floor((_root._ymouse - k_offset_y + k_width * 0.5) / k_width);
        if (ii < 0 or 8 < ii or jj < 0 or 8 < jj) {
          if (_root.k.p_type._visible) {
            nomoved();
            if (guide) {
              i = 1;
              while (9 >= i) {
                j = 1;
                while (9 >= j) {
                  _root.k['s' + i + '_' + j]._visible = false;
                  ++j;
                }
                ++i;
              }
            }
          }
          return undefined;
        }
        var b;
        var c;
        var u;
        var i;
        var j;
        var k;
        var x;
        var y;
        var obj;
        var kinte;
        var fy;
        var fx;
        var ty;
        var tx;
        ++ii;
        ++jj;
        b = koma[board[ii][jj]][2];
        if (_root.k.p_type._visible) {
          if (b == 0) {
            kinte = false;
            if (iii == 0) {
              if ((jjj == fu or jjj == ky) and ii == 1 or jjj == ke and 2 >= ii) {
                kinte = true;
              } else {
                if (jjj == fu) {
                  i = 1;
                  while (9 >= i) {
                    if (koma[board[i][jj]][2] == fu) {
                      kinte = true;
                      break;
                    }
                    ++i;
                  }
                  if (koma[board[ii - 1][jj]][2] == eou) {
                    calc_kiki();
                    var kaihi = false;
                    if (1 < kiki[ii][jj][1]) {
                      kaihi = true;
                    }
                    i = 0;
                    while (i < 3) {
                      j = 0;
                      while (j < 3) {
                        x = jj + j - 1;
                        y = ii + i - 2;
                        if (koma[board[y][x]][2] < enemy and kiki[y][x][0] == 0) {
                          kaihi = true;
                          break;
                        }
                        ++j;
                      }
                      ++i;
                    }
                    if (!kaihi) {
                      kinte = true;
                    }
                  }
                }
              }
            }
            if (!can_move()) {
              kinte = true;
            }
            if (kinte) {
              nomoved();
            } else {
              r_capture[tesu + 1] = 0;
              moved();
            }
          } else {
            obj = _root.k['_' + ii + '_' + jj];
            if (!(obj.g._currentframe & enemy)) {
              nomoved();
            } else {
              if (iii == 0 or !can_move()) {
                if (guide) {
                  i = 1;
                  while (9 >= i) {
                    j = 1;
                    while (9 >= j) {
                      _root.k['s' + i + '_' + j]._visible = false;
                      ++j;
                    }
                    ++i;
                  }
                }
                nomoved();
                return undefined;
              }
              r_capture[tesu + 1] = b;
              if (b & promoted) {
                b -= promoted;
                --narikoma;
              }
              b -= enemy;
              var my = [0, 3, 2, 2, 1, 1, 0, 0];
              var mx = [0, 0, 1, 0, 1, 0, 1, 0];
              fx = (jj - 1) * k_width + k_offset_x;
              fy = (ii - 1) * k_width + k_offset_y;
              tx = mx[b] * k_width * 1.5 + k_offset_x + k_width * 9.300000190734863;
              ty = my[b] * k_width + k_offset_y + k_width * 5;
              _root.c._x = fx;
              _root.c._y = fy;
              _root.c.gotoandstop(b);
              c_flag = true;
              c_h = b;
              c_dy = (ty - fy) / 4;
              c_dx = (tx - fx) / 4;
              c_cnt = 0;
              ++motigoma[b];
              var c = board[ii][jj];
              motigoma_u[b][motigoma[b]] = c;
              koma[c][0] = 0;
              koma[c][2] = b;
              moved();
            }
          }
          if (guide) {
            i = 1;
            while (9 >= i) {
              j = 1;
              while (9 >= j) {
                _root.k['s' + i + '_' + j]._visible = false;
                ++j;
              }
              ++i;
            }
          }
        } else {
          if (b == 0 or b & enemy) {
            return undefined;
          }
          obj = _root.k['_' + ii + '_' + jj];
          _root.k.p_type._x = _root._xmouse;
          _root.k.p_type._y = _root._ymouse;
          _root.k.p_type._visible = true;
          _root.k.p_type.g.gotoandstop(obj.g._currentframe);
          obj._visible = false;
          iii = ii;
          jjj = jj;
          if (guide) {
            u = board[ii][jj];
            i = 1;
            while (9 >= i) {
              j = 1;
              while (9 >= j) {
                _root.k['s' + i + '_' + j]._visible = true;
                if (koma[board[i][j]][2] & enemy or board[i][j] == 0) {
                  if (kiki[i][j][0]) {
                    k = 1;
                    while (kiki[i][j][0] >= k) {
                      if (kiki_u[i][j][0][k] == u) {
                        _root.k['s' + i + '_' + j]._visible = false;
                        break;
                      }
                      ++k;
                    }
                  }
                }
                ++j;
              }
              ++i;
            }
          }
        }
      }

      function moved() {
        var obj = _root.k['_' + ii + '_' + jj];
        obj._visible = true;
        obj.g.gotoandstop(_root.k.p_type.g._currentframe);
        _root.k.p_type._visible = false;
        _root.k['_' + bi + '_' + bj].b._visible = false;
        if (!guide) {
          obj.b._visible = true;
        }
        bi = ii;
        bj = jj;
        ++tesu;
        r_x_from[tesu] = jjj;
        r_x_to[tesu] = jj;
        r_y_from[tesu] = iii;
        r_y_to[tesu] = ii;
        r_promote[tesu] = 0;
        pause = true;
        _root.t = tesu;
        ++tesu_max;
        if (iii == 0) {
          if (_root.m.soundflag) {
            _root.s1.play();
          }
          board[ii][jj] = motigoma_u[jjj][motigoma[jjj] + 1];
          koma[board[ii][jj]][0] = ii;
          koma[board[ii][jj]][1] = jj;
          think();
        } else {
          kk = board[iii][jjj];
          board[iii][jjj] = 0;
          board[ii][jj] = kk;
          koma[kk][0] = ii;
          koma[kk][1] = jj;
          if (koma[kk][2] & promoted or koma[kk][2] == ki or koma[kk][2] == ou or 3 < ii and 3 < iii) {
            if (_root.m.soundflag) {
              _root.s1.play();
            }
            think();
          } else {
            if ((koma[kk][2] == fu or koma[kk][2] == ky) and ii == 1 or koma[kk][2] == ke and 2 >= ii) {
              if (_root.m.soundflag) {
                _root.s1.play();
              }
              koma[kk][2] += promoted;
              obj.g.gotoandstop(koma[kk][2]);
              r_promote[tesu] = 1;
              think();
            } else {
              _root.p.aa.gotoandstop(koma[kk][2]);
              _root.p.bb.gotoandstop(koma[kk][2] + promoted);
              _root.p._x = _root._xmouse;
              _root.p._y = _root._ymouse;
              _root.p._visible = true;
            }
          }
        }
      }

      function nomoved() {
        var obj = _root.k['_' + iii + '_' + jjj];
        obj._visible = true;
        _root.k.p_type._visible = false;
        if (iii == 0) {
          ++motigoma[jjj];
          _root.n['_' + jjj].t = motigoma[jjj];
          if (1 < motigoma[jjj]) {
            _root.n['_' + jjj]._visible = true;
          }
        } else {
          obj.g.gotoandstop(_root.k.p_type.g._currentframe);
        }
      }

      function pick() {
        if (game_over or pause or _root.ru._visible or _root.j._visible or _root.tr._visible) {
          return undefined;
        }
        _root.k.p_type._x = _root._xmouse;
        _root.k.p_type._y = _root._ymouse;
        _root.k.p_type._visible = true;
        _root.k.p_type.g.gotoandstop(ll);
        --motigoma[ll];
        _root.n['_' + ll].t = motigoma[ll];
        if (motigoma[ll] < 1) {
          _root.k['_0_' + ll]._visible = false;
        }
        if (motigoma[ll] < 2) {
          _root.n['_' + ll]._visible = false;
        }
        iii = 0;
        jjj = ll;
      }

      function choose(aa) {
        if (_root.ru._visible or _root.j._visible or _root.tr._visible) {
          return undefined;
        }
        if (aa == 1) {
          if (_root.m.soundflag) {
            _root.s1.play();
          }
          koma[kk][2] += promoted;
          _root.k['_' + ii + '_' + jj].g.gotoandstop(koma[kk][2]);
          r_promote[tesu] = 1;
        } else {
          if (_root.m.soundflag) {
            _root.s1.play();
          }
        }
        _root.p._visible = false;
        think();
      }

      function can_move() {
        if (iii == 0) {
          return true;
        }
        var b;
        var c;
        var i;
        var j;
        var k;
        var x;
        var y;
        b = koma[board[iii][jjj]][2];
        i = 0;
        while (i < can_n[b]) {
          if (jjj + can_x[b][i] == jj and iii + can_y[b][i] == ii) {
            return true;
          }
          ++i;
        }
        if (b == ky) {
          i = 1;
          while (i < masu) {
            x = jjj;
            y = iii + tobi[0][0][1] * i;
            c = board[y][x];
            if (c == ob) {
              break;
            } else {
              if (0 < c) {
                if (koma[c][2] & enemy) {
                  if (x == jj and y == ii) {
                    return true;
                  }
                }
                break;
              }
            }
            if (x == jj and y == ii) {
              return true;
            }
            ++i;
          }
          return false;
        }
        if (tobikoma[b]) {
          if (b == hi or b == ry) {
            k = 0;
          } else {
            k = 1;
          }
          i = 0;
          while (i < 4) {
            j = 1;
            while (j < masu) {
              x = jjj + tobi[k][i][0] * j;
              y = iii + tobi[k][i][1] * j;
              c = board[y][x];
              if (c == ob) {
                break;
              } else {
                if (0 < c) {
                  if (koma[c][2] & enemy) {
                    if (x == jj and y == ii) {
                      return true;
                    }
                  }
                  break;
                }
              }
              if (x == jj and y == ii) {
                return true;
              }
              ++j;
            }
            ++i;
          }
        }
        return false;
      }

      function show_guide() {
        var i;
        var j;
        var k0;
        var k1;
        var obj;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            obj = _root.f['_' + i + '_' + j];
            k0 = kiki[i][j][0];
            k1 = kiki[i][j][1];
            if (k0) {
              if (k1) {
                if (k1 < k0) {
                  obj.gotoandstop(5);
                } else {
                  obj.gotoandstop(4);
                }
              } else {
                obj.gotoandstop(2);
              }
            } else {
              if (k1) {
                obj.gotoandstop(3);
              } else {
                obj.gotoandstop(1);
              }
            }
            ++j;
          }
          ++i;
        }
        _root.k['_' + bi + '_' + bj].b._visible = false;
      }

      function hide_guide() {
        var i;
        var j;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            _root.f['_' + i + '_' + j].gotoandstop(1);
            ++j;
          }
          ++i;
        }
        _root.k['_' + bi + '_' + bj].b._visible = true;
      }

      function think() {
        if (3 < cnt) {
          cnt = 0;
          return undefined;
        }
        if (game_over) {
          return undefined;
        }
        var a;
        var b;
        var c;
        var d;
        var i;
        var j;
        var k;
        var l;
        var m;
        var x;
        var y;
        var obj;
        var kinte = false;
        var tx;
        var ty;
        var fx;
        var fy;
        var my = [0, 0, 1, 1, 2, 2, 3, 3];
        var mx = [0, 1, 0, 1, 0, 1, 0, 1];
        calc_kiki();
        teban = 1;
        if (!syuban) {
          a = 0;
          b = 0;
          i = 3;
          while (40 >= i) {
            if (i < 23 or koma[i][2] & promoted) {
              y = koma[i][0];
              if (0 < y) {
                if (koma[i][2] & enemy) {
                  if (y >= 7) {
                    ++b;
                  }
                } else {
                  if (3 >= y) {
                    ++a;
                  }
                }
              }
            }
            ++i;
          }
          if (a) {
            if (a >= 2 or b >= 2) {
              syuban = 1;
            }
          }
        }
        _root.txt2 = '';
        sente_motigoma = 0;
        gote_motigoma = 0;
        i = 2;
        while (7 >= i) {
          if (0 < motigoma[i]) {
            sente_motigoma = 1;
            break;
          }
          ++i;
        }
        i = 2;
        while (7 >= i) {
          if (0 < motigoma[i + enemy]) {
            gote_motigoma = 1;
            break;
          }
          ++i;
        }
        if (kiki[koma[2][0]][koma[2][1]][0] == 0) {
          checked = 0;
          loadfrom_();
          saveto1();
          tumi_flag = 0;
          i = -1;
          while (i < 2) {
            j = -1;
            while (j < 2) {
              y = koma[2][0] + i;
              x = koma[2][1] + j;
              if (kiki[y][x][0] and (i != 0 or j != 0) and board[y][x] < ob) {
                if (1 < kiki[y][x][0] or board[y][x] == 0 and sente_motigoma) {
                  if (make_oute(y, x, 0)) {
                    tumi_flag = 1;
                    break;
                  }
                }
              }
              ++j;
            }
            if (tumi_flag) {
              break;
            }
            ++i;
          }
        } else {
          checked = 1;
        }
        searched = [];
        search_num = -1;
        best_value = -200000000;
        best_value2 = -200000001;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            b = koma[board[i][j]][2];
            if (b & enemy) {
              c = b - enemy;
              k = 0;
              while (k < can_n[c]) {
                x = j + can_x[c][k];
                y = i - can_y[c][k];
                d = board[y][x];
                if (!(d == ob or koma[d][2] & enemy)) {
                  determine(b, c, koma[d][2], i, j, x, y);
                }
                ++k;
              }
              if (c == ky) {
                k = 1;
                while (k < masu) {
                  x = j;
                  y = i - tobi[0][0][1] * k;
                  d = board[y][x];
                  if (d == ob) {
                    break;
                  } else {
                    if (0 < d) {
                      if (!(koma[d][2] & enemy)) {
                        determine(b, c, koma[d][2], i, j, x, y);
                      }
                      break;
                    }
                  }
                  determine(b, c, koma[d][2], i, j, x, y);
                  ++k;
                }
              } else {
                if (tobikoma[c]) {
                  if (c == hi or c == ry) {
                    m = 0;
                  } else {
                    m = 1;
                  }
                  k = 0;
                  while (k < 4) {
                    l = 1;
                    while (l < masu) {
                      x = j + tobi[m][k][0] * l;
                      y = i - tobi[m][k][1] * l;
                      d = board[y][x];
                      if (d == ob) {
                        break;
                      } else {
                        if (0 < d) {
                          if (!(koma[d][2] & enemy)) {
                            determine(b, c, koma[d][2], i, j, x, y);
                          }
                          break;
                        }
                      }
                      determine(b, c, koma[d][2], i, j, x, y);
                      ++l;
                    }
                    ++k;
                  }
                }
              }
            }
            ++j;
          }
          ++i;
        }
        j = 7 + enemy;
        while (j >= 1 + enemy) {
          if (0 < motigoma[j]) {
            y = 1;
            while (9 >= y) {
              x = 1;
              while (9 >= x) {
                if (board[y][x] == 0) {
                  kinte = false;
                  if (j == eke and 7 < y) {
                    kinte = true;
                  } else {
                    if (j == eky and 8 < y) {
                      kinte = true;
                    } else {
                      if (j == efu) {
                        if (8 < y) {
                          kinte = true;
                        }
                        k = 1;
                        while (9 >= k) {
                          if (koma[board[k][x]][2] == efu) {
                            kinte = true;
                            break;
                          }
                          ++k;
                        }
                        if (koma[board[y + 1][x]][2] == ou) {
                          var kaihi = false;
                          if (1 < kiki[y][x][0]) {
                            kaihi = true;
                          }
                          k = 0;
                          while (k < 3) {
                            l = 0;
                            while (l < 3) {
                              var x0 = x + l - 1;
                              var y0 = y + k;
                              if ((board[y0][x0] == 0 or koma[board[y0][x0]][2] & enemy) and kiki[y0][x0][1] == 0) {
                                kaihi = true;
                                break;
                              }
                              ++l;
                            }
                            ++k;
                          }
                          if (!kaihi) {
                            kinte = true;
                          }
                        }
                      }
                    }
                  }
                  if (!kinte) {
                    b = j;
                    c = b - enemy;
                    d = 0;
                    i = 0;
                    determine(b, c, d, i, j, x, y);
                  }
                }
                ++x;
              }
              ++y;
            }
          }
          --j;
        }
        if (best_value == -200000000) {
          if (_root.m.soundflag) {
            _root.s3.play();
            _root.s6.play();
          }
          _root.w._visible = true;
          _root.w.gotoandplay(1);
          winner = 0;
          _root.m.won = 1;
          game_end();
          _root.h.gotoandstop('lose');
        } else {
          ++tesu;
          _root.t = tesu;
          ++tesu_max;
          x = 10 - xx;
          y = yy;
          if (ii == 0) {
            j = 0;
            i = 0;
          } else {
            j = 10 - jj;
            i = ii;
          }
          best_value = math.round(best_value);
          _root.txt1 = x + '' + y + moji[cc] + '(' + j + '' + i + ')' + ' : ' + best_value;
          x = 10 - xx2;
          y = yy2;
          if (ii2 == 0) {
            j = 0;
            i = 0;
          } else {
            j = 10 - jj2;
            i = ii2;
          }
          best_value2 = math.round(best_value2);
          _root.txt1 += '\n' + x + '' + y + moji[cc2] + '(' + j + '' + i + ')' + ' : ' + best_value2;
          r_x_from[tesu] = jj;
          r_x_to[tesu] = xx;
          r_y_from[tesu] = ii;
          r_y_to[tesu] = yy;
          r_capture[tesu] = dd;
          r_promote[tesu] = 0;
          rireki_y.push(yy);
          rireki_x.push(xx);
          rireki_h.push(cc);
          m_y = yy;
          m_x = xx;
          m_h = bb;
          tx = (xx - 1) * k_width + k_offset_x;
          ty = (yy - 1) * k_width + k_offset_y;
          if (ii == 0) {
            fx = mx[jj - enemy] * k_width * 1.5 + k_offset_x - k_width * 3.200000047683716;
            fy = my[jj - enemy] * k_width + k_offset_y;
          } else {
            fx = (jj - 1) * k_width + k_offset_x;
            fy = (ii - 1) * k_width + k_offset_y;
          }
          _root.c._x = fx;
          _root.c._y = fy;
          _root.c.gotoandstop(bb);
          m_dy = (ty - fy) / 8;
          m_dx = (tx - fx) / 8;
          m_cnt = 0;
          m_flag = true;
          if (ii == 0) {
            board[yy][xx] = motigoma_u[bb][motigoma[bb]];
            --motigoma[bb];
            _root.n['_' + bb].t = motigoma[bb];
            if (motigoma[bb] < 1) {
              _root.k['_0_' + bb]._visible = false;
            }
            if (motigoma[bb] < 2) {
              _root.n['_' + bb]._visible = false;
            }
          } else {
            _root.k['_' + ii + '_' + jj]._visible = false;
            m = board[yy][xx];
            board[yy][xx] = board[ii][jj];
            board[ii][jj] = 0;
            if (6 < ii or 6 < yy) {
              if (cc != ki and cc != ou and !(cc & promoted)) {
                bb += promoted;
                cc += promoted;
                m_h += promoted;
                r_promote[tesu] = 1;
                ++narikoma;
              }
            }
          }
          koma[board[yy][xx]][2] = bb;
          koma[board[yy][xx]][0] = yy;
          koma[board[yy][xx]][1] = xx;
          if (dd == ou) {
            m_win = true;
          } else {
            if (0 < dd) {
              m_c_flag = true;
              if (dd & promoted) {
                dd -= promoted;
              }
              dd += enemy;
              m_c = dd;
              fx = (xx - 1) * k_width + k_offset_x;
              fy = (yy - 1) * k_width + k_offset_y;
              tx = mx[dd - enemy] * k_width * 1.5 + k_offset_x - k_width * 3.200000047683716;
              ty = my[dd - enemy] * k_width + k_offset_y;
              c_h = dd;
              c_dy = (ty - fy) / 4;
              c_dx = (tx - fx) / 4;
              c_cnt = 0;
              ++motigoma[dd];
              motigoma_u[dd][motigoma[dd]] = m;
              koma[m][0] = 0;
              koma[m][2] = dd;
            } else {
              m_c_flag = false;
            }
          }
          calc_kiki();
          teban = 0;
          last_move = cc;
          rireki_y.shift();
          rireki_x.shift();
          rireki_h.shift();
        }
      }

      function determine(he0, he, capture, fy, fx, tx, ty) {
        var mate = false;
        var gida = false;
        var front = koma[board[ty + 1][tx]][2];
        var dx = math.abs(tx - koma[1][1]);
        var dy = math.abs(ty - koma[1][0]);
        var kk0;
        var kk1;
        var same;
        var used = [];
        var he2 = he;
        var prom = 0;
        var danger = 0;
        var f;
        var h;
        var i;
        var j;
        var k;
        var p;
        var u;
        var x;
        var y;
        var ah;
        var tmp;
        var tmp_u;
        var atari;
        var atari2;
        var pp;
        var k0 = kiki[ty][tx][0];
        var k1 = kiki[ty][tx][1];
        var value;
        if (capture == ou) {
          value = 20000;
          change_best_value(he0, he, capture, fy, fx, tx, ty, value);
          return undefined;
        }
        if (5000 < best_value) {
          return undefined;
        }
        value = point[syuban][capture];
        if (syuban) {
          tmp = math.min(math.max(dy, dx), math.max(math.abs(koma[2][0] - ty), math.abs(koma[2][1] - tx)));
          if (fy == 0) {
            ++tmp;
          }
          if (he == hi or he == ry or he & promoted) {
            --tmp;
          }
          if (tmp >= 6 and capture == 0) {
            return undefined;
          }
          if (board_d1[ty][tx] >= 2) {
            value += 15 - board_d0[ty][tx] * 3;
          }
        }
        if (fy == 0) {
          if (!yukoda(he, ty, tx)) {
            return undefined;
          }
          value -= uti[he];
          if (koma[1][0] >= 7 and ty < 7) {
            value -= 3;
          }
          if (syuban == 0) {
            if (4 >= ty and k0 == 0 and !checked and !tumi_flag and board_d1[ty][tx] >= 2) {
              value -= 3;
            }
          }
          if (k1) {
            if (checked or tumi_flag) {
              value += 7 - he;
            }
            if (checked) {
              if (sente_motigoma) {
                value += 2;
              }
              if (k1) {
                i = 1;
                while (k1 >= i) {
                  if (koma[kiki_u[ty][tx][1][i]][2] != eou) {
                    value += 5;
                    break;
                  }
                  ++i;
                }
              }
            }
          }
        } else {
          --k1;
          if (6 < fy or 6 < ty) {
            if (he != ki and he != ou and !(he & promoted)) {
              he2 += promoted;
              if (k1 >= k0) {
                value += promote_point[he] / (narikoma + 1);
                if (syuban) {
                  if (dx >= 3) {
                    value -= dx;
                  }
                }
              }
              prom = 1;
            }
          }
        }
        if (he == fu) {
          if (0 < fy) {
            if (capture == 0) {
              if (ty == 5 and tx == 7) {
                value -= 30;
              } else {
                if (ty == 4 and tx == 6) {
                  value -= 30;
                }
              }
            } else {
              value += 7;
              if (prom) {
                value += 5;
                if (kiki[fy][fx][0] < kiki[fy][fx][1]) {
                  value += 5;
                }
              }
            }
            if (ty == 4 and tx == 5) {
              if (motigoma[6] >= 1) {
                value -= 10;
              }
              if (koma[board[3][3]][2] == efu) {
                value -= 6;
              }
            }
            if (ty == 5 and tx == 5 and front != fu) {
              if (koma[board[2][8]][2] == eka) {
                value -= 8;
              }
            }
            if (ty == 4 and tx == 8) {
              if (capture == 0) {
                value -= 30;
              } else {
                if (capture == fu) {
                  value += 10;
                  if (kiki[4][8][0] >= kiki[4][8][1]) {
                    i = 1;
                    while (kiki[4][8][0] >= i) {
                      if (koma[kiki_u[4][8][0][i]][2] == hi) {
                        value += 35;
                        break;
                      }
                      ++i;
                    }
                  }
                }
              }
            }
            if (ty == 4 and tx == 7) {
              if (koma[board[2][8]][2] == eka) {
                value += 3;
              } else {
                value -= 2;
              }
            }
            value += (tx % 2) * 4;
            value += (9 - ty) / 3;
            if (7 < board_num) {
              if (tx == 1 or tx == 9) {
                value -= 3;
              }
            }
            if (k1 >= k0 and k1) {
              k = 0;
              i = 1;
              while (kiki[ty][tx][1] >= i) {
                if (koma[kiki_u[ty][tx][1][i] % kan][2] == eka) {
                  k = 1;
                }
                ++i;
              }
              if (k == 0) {
                if (tx == 1) {
                  if (kiki[7][1][0] == 0 and (board[7][1] == 0 or koma[board[7][1]][2] == fu) and koma[1][1] >= 4) {
                    value += 1;
                  } else {
                    if (koma[board[4][2]][2] != egi) {
                      value -= 9;
                    }
                  }
                } else {
                  if (tx == 9) {
                    if (kiki[7][9][0] == 0 and (board[7][9] == 0 or koma[board[7][9]][2] == fu) and 6 >= koma[1][1]) {
                      value += 1;
                    } else {
                      value -= 9;
                    }
                  } else {
                    value += 1;
                  }
                }
              }
              i = 1;
              while (kiki[fy][fx][1] >= i) {
                if (koma[kiki_u[fy][fx][1][i]][2] == ehi or koma[kiki_u[fy][fx][1][i]][2] == ery) {
                  if (koma[kiki_u[fy][fx][1][i]][0] < fy and koma[kiki_u[fy][fx][1][i]][1] == fx) {
                    value += 5;
                    if (tesu < 20) {
                      if (board_num >= 1 and 7 >= board_num) {
                        value += 7;
                      } else {
                        if (6 >= tesu) {
                          value += 7;
                        }
                      }
                    }
                    if (board[ty + 1][tx] and !(front & enemy)) {
                      value += 15;
                      j = 1;
                      while (kiki[ty + 1][tx][0] >= j) {
                        if (koma[kiki_u[ty + 1][tx][0][j]][2] == ky) {
                          value -= 60;
                          break;
                        }
                        ++j;
                      }
                    }
                    break;
                  }
                }
                ++i;
              }
              if (koma[board[fy][fx - 1]][2] == egi or koma[board[fy][fx + 1]][2] == egi) {
                if (tx != 1) {
                  value += 8;
                }
              }
              if (koma[board[fy][fx - 1]][2] == eki or koma[board[fy][fx + 1]][2] == eki) {
                value += 8;
              }
              if (koma[board[ty][tx - 1]][2] == egi or koma[board[ty][tx + 1]][2] == egi) {
                value += 4;
              }
            }
            if (kiki[fy][fx][1]) {
              k = 0;
              i = 1;
              while (kiki[fy][fx][1] >= i) {
                if (koma[kiki_u[fy][fx][1][i] % kan][2] == eka) {
                  k = 1;
                }
                ++i;
              }
              if (k) {
                value += 6;
              }
            }
            if (koma[board[ty + 2][tx]][2] == ke) {
              if (k1 >= k0 and kiki[ty + 1][tx][1] >= kiki[ty + 1][tx][0]) {
                value += 5;
              }
            }
          } else {
            if (2 >= ty) {
              if (koma[board[ty + 2][tx]][2] == fu or kiki[ty + 1][tx][0] >= 2) {
                value += 5;
              }
            } else {
              if (front == fu or koma[board[ty + 2][tx]][2] == fu) {
                value -= 8;
              }
            }
            if (kiki[ty][tx][0] == 0 and kiki[ty + 1][tx][0] == 0 and ty < 6) {
              if (front & enemy or board[ty + 1][tx] == 0) {
                if (koma[board[ty + 2][tx]][2] & enemy or board[ty + 2][tx] == 0) {
                  value -= 8;
                }
              }
            }
            if (ty == 6 and tx == 2) {
              if (koma[board[7][2]][2] == fu and 1 >= k1) {
                value -= 10;
              }
            }
            if (front >= ky and ou >= front) {
              if (syuban and 2 >= dx or front == hi) {
                if (math.random() * 15 < 1) {
                  value += 40;
                  gida = true;
                }
              }
              if (kiki[ty][tx][1]) {
                f = 0;
                i = 1;
                while (kiki[ty][tx][1] >= i) {
                  if (koma[kiki_u[ty][tx][1][i]][2] == eke or koma[kiki_u[ty][tx][1][i]][2] == eto) {
                    f = 1;
                    break;
                  }
                  ++i;
                }
                if (f) {
                  value += 30;
                }
              }
            }
          }
          f = true;
          i = ty + 1;
          while (9 >= i) {
            h = koma[board[i][tx]][2];
            if (h and !(h & enemy)) {
              f = false;
              break;
            }
            ++i;
          }
          if (f and k1 >= k0) {
            if (kiki[ty + 1][tx][1] >= kiki[ty + 1][tx][0] and board[ty + 1][tx] == 0) {
              i = 1;
              while (kiki[ty + 1][tx][1] >= i) {
                if (koma[kiki_u[ty + 1][tx][1][i]][2] == eto) {
                  if (kiki[ty + 1][tx][0] < kiki[ty + 1][tx][1]) {
                    f = false;
                    break;
                  }
                }
                ++i;
              }
              if (fy == 0 and ty < 6) {
                f = false;
              }
              if (k0 < k1 and ty >= 7) {
                i = 1;
                while (k1 >= i) {
                  if (koma[kiki_u[ty][tx][1][i]][2] == eky) {
                    f = false;
                    break;
                  }
                  ++i;
                }
              }
              if (f) {
                value += 4 + 10 / (narikoma + 1) - math.abs(ty - 6) - dx / 2;
                if (2 >= dx and ty >= 6) {
                  value += 3;
                }
                if (koma[1][0] < ty) {
                  value -= 5;
                }
                if (syuban) {
                  value -= dx;
                  if (ty < 6) {
                    value -= 7;
                  }
                }
              }
            }
          }
          u = board[ty + 1][tx];
          if (u != ob and u != 0 and !(koma[u][2] & enemy)) {
            if (k1 >= k0 and koma[u][2] != fu) {
              value += point[syuban][koma[u][2]] / 40 + 3;
              if (1 >= math.abs(koma[2][0] - ty + 1) and 1 >= math.abs(koma[2][1] - tx)) {
                value += 10;
                if (tx == koma[2][1] and ty == koma[2][0] + 1) {
                  value += 10;
                }
              }
              if (koma[board[ty - 1][tx]][2] == eka) {
                value += 10;
              }
              if (koma[u][2] == hi or koma[u][2] == ry) {
                if (ty >= 6) {
                  value += 20;
                }
              }
            }
          }
          if (k1 >= k0 and koma[u][2] != fu and koma[board[ty + 2][tx]][2] != fu) {
            if (1 >= math.abs(koma[1][0] - ty - 2) and 1 >= dx) {
              value += 7;
            }
          }
          k = 0;
          i = 1;
          while (kiki[ty][tx][1] >= i) {
            h = koma[kiki_u[ty][tx][1][i] % kan][2];
            if (h == ehi or h == ery or h == eky) {
              if (koma[kiki_u[ty][tx][1][i] % kan][0] < ty and koma[kiki_u[ty][tx][1][i] % kan][1] == tx) {
                k = 1;
                break;
              }
            }
            ++i;
          }
          if (k) {
            if ((board[ty + 1][tx] == 0 or front & enemy) and fy == 0 and ty < 6) {
              value -= 10;
            }
            if (k1 >= 2 and k1 >= k0) {
              if (1 >= kiki[ty + 1][tx][0] and board[ty + 1][tx] != 0 and !(front & enemy)) {
                value += 20;
                if (k0 < k1) {
                  value += 10;
                }
                if (koma[board[ty - 1][tx - 1]][2] == egi and koma[board[ty][tx - 1]][2] == fu or koma[board[ty - 1][tx + 1]][2] == egi and koma[board[ty][tx + 1]][2] == fu) {
                  value += point[syuban][gi] - 50;
                }
              }
            }
          }
          if (k0 and k1 and k1 >= k0) {
            i = 1;
            while (kiki[ty][tx][0] >= i) {
              h = kiki_u[ty][tx][0][i];
              if (h < kan) {
                if (tobikoma[koma[h][2]]) {
                  value += 2;
                  if (checked) {
                    value += 3;
                  }
                  if (fy == 0 and ty < koma[h][0] and koma[h][1] == tx and 3 < koma[h][0]) {
                    if (koma[h][2] == hi or koma[h][2] == ry) {
                      value += 10;
                      if (motigoma[1] >= 1) {
                        value += 5;
                      }
                      if (ty == 3 and tx == 3) {
                        value += 5;
                      }
                    }
                  }
                }
              }
              ++i;
            }
          }
          if (front & enemy) {
            if (kiki[ty + 1][tx][1] < kiki[ty + 1][tx][0]) {
              value += 6;
            }
          }
          if (front == ke and k1 >= k0 and 2 >= dx and 3 >= dy) {
            value += 20;
          }
          if (ty == 5 and tx == 4) {
            if (koma[board[1][7]][2] == eka or koma[board[2][6]][2] == eka) {
              value += 5;
            }
            if (front != 0 and !(front & enemy)) {
              f = 0;
              i = 1;
              while (kiki[6][4][1] >= i) {
                if (koma[kiki_u[6][4][1][i]][2] == eka) {
                  f = 1;
                  break;
                }
                ++i;
              }
              if (f) {
                f = 0;
                i = 1;
                while (kiki[6][4][0] >= i) {
                  if (koma[kiki_u[6][4][0][i]][2] == ka) {
                    f = 1;
                    break;
                  }
                  ++i;
                }
                if (!f) {
                  i = 1;
                  while (kiki[6][4][1] >= i) {
                    if (koma[kiki_u[6][4][1][i]][2] == ehi) {
                      if (kiki[6][4][1] >= kiki[6][4][0]) {
                        if (kiki[5][4][0] < kiki[5][4][1]) {
                          f = 1;
                          break;
                        }
                      }
                    }
                    ++i;
                  }
                }
              }
              if (f) {
                value += 20;
                gida = true;
              }
            }
          }
          if (k1 == 0 and k0 and capture == 0 and !gida) {
            value -= 40;
          }
        } else {
          if (he == ky) {
            if (fy == 0) {
              f = 0;
              i = 2;
              while (i < ty) {
                if (koma[board[i][tx]][2] == fu) {
                  f = 1;
                  break;
                }
                ++i;
              }
              if (f and ty < 8 and 3 >= dx) {
                value += 10;
                if (1 >= dx) {
                  value += 10;
                }
              }
              if (k1) {
                i = 1;
                while (k1 >= i) {
                  if (koma[kiki_u[ty][tx][1][i]][2] == ehi) {
                    if (koma[kiki_u[ty][tx][1][i]][0] < ty) {
                      value += 3;
                    }
                  }
                  ++i;
                }
              }
              if (front == 0) {
                if (koma[board[ty + 2][tx]][2] >= gi and ou >= koma[board[ty + 2][tx]][2]) {
                  if (kiki[ty + 1][tx][1] >= kiki[ty + 1][tx][0]) {
                    value += 25;
                    if (koma[board[ty + 2][tx]][2] == hi) {
                      value += 5;
                    }
                  }
                }
              } else {
                if (front >= gi and ou >= front) {
                  if (k1 >= k0) {
                    value += 20;
                    if (front == hi) {
                      value += 5;
                    }
                  } else {
                    if (koma[board[ty - 1][tx]][2] == efu) {
                      value += point[syuban][ky] + 20;
                    }
                  }
                }
              }
            } else {
              if (capture == 0) {
                value -= 20;
                if (ty == 2) {
                  value -= 100;
                }
              } else {
                value += 5;
                if (ty >= 7) {
                  value += 5;
                }
                if (capture == fu and ty == fy + 1) {
                  value += 20;
                } else {
                  if (capture == ky) {
                    if (k1 < k0) {
                      value += 30;
                    }
                  }
                }
              }
            }
            if (prom and k1 >= k0) {
              value += 6;
              if (ty == 7) {
                value += 2;
              }
            }
            if (kiki[ty + 1][tx][1] < kiki[ty + 1][tx][0] and board[ty + 1][tx] == 0) {
              value -= 20;
            }
          } else {
            if (he == ke) {
              if (ty < 7 and 3 < ty and 3 >= dx and k1 >= k0) {
                x = koma[board[ty + 2][tx - 1]][2];
                y = koma[board[ty + 2][tx + 1]][2];
                if (x >= gi and ou >= x or y >= gi and ou >= y) {
                  value += 25;
                  if (x == ki or y == ki) {
                    value += 10;
                  } else {
                    if (x == ou or y == ou) {
                      value += 15;
                    }
                  }
                }
              }
              if (ty == koma[1][0] - 3 and 1 >= dx) {
                value += 6;
              }
              if (capture == 0) {
                if (tx == 1 or tx == 9) {
                  value -= 2;
                }
                if (tesu < 40 and 8 >= board_num) {
                  value -= 2;
                }
              } else {
                value += 2;
              }
              if (8 < board_num) {
                value += 5;
                if (30 < tesu) {
                  if (fy == 1) {
                    value += 5;
                  }
                }
              }
              if (fy == 0) {
                if (kiki[fy][fx][1] < kiki[fy][fx][0]) {
                  value += 3;
                }
              }
              if (k0) {
                i = 1;
                while (k0 >= i) {
                  if (koma[kiki_u[ty][tx][0][i]][2] == ky) {
                    value -= 5;
                    break;
                  }
                  ++i;
                }
              }
              if (prom and k1 >= k0) {
                value += 5;
              }
              if (ty == 3 and tx == 7) {
                if (koma[board[2][8]][2] == eka) {
                  value -= 5;
                }
              }
              if (ty == 3 and tx == 3 and fy == 1) {
                if (koma[board[4][3]][2] == egi) {
                  value += 2;
                }
              }
            } else {
              if (he == gi) {
                if (fy < ty) {
                  value += 3;
                } else {
                  if (ty < fy) {
                    value -= 1;
                  }
                }
                if (0 < fy) {
                  if (tesu < 30) {
                    if (ty == 2 and tx == 7) {
                      value -= 3;
                    }
                  }
                  if (ty == 1) {
                    value -= 4;
                  }
                } else {
                  if (ty == 9 and tx == 7) {
                    if (board[8][6] == 0 and kiki[ty][tx][1] == 0) {
                      value -= 20;
                    }
                  }
                  if (front == ke and 5 >= ty and 2 >= dx) {
                    if (kiki[ty - 1][tx - 1][1] < kiki[ty - 1][tx - 1][0] or kiki[ty - 1][tx + 1][1] < kiki[ty - 1][tx + 1][0]) {
                      value += 5;
                    }
                  }
                }
                if (fy == 1) {
                  if (6 < tesu) {
                    value += 2;
                  }
                }
                if (ty == 3 and tx == 7) {
                  if (koma[board[2][8]][2] == eka) {
                    if (kiki[4][7][0] == 0) {
                      value -= 5;
                    }
                    if (kiki[4][8][0] >= 3 and 1 >= kiki[3][8][1]) {
                      value += 40;
                    }
                  } else {
                    if (fy == 2) {
                      value += 10;
                    }
                  }
                }
                if (fy == 3 and fx == 7) {
                  if (capture == 0) {
                    value -= 7;
                    if (ty == 4 and tx == 8) {
                      value -= 5;
                    }
                    if (kiki[4][8][0] >= kiki[4][8][1]) {
                      value -= 15;
                    } else {
                      if (koma[board[2][8]][2] == eka) {
                        value += 2;
                      }
                    }
                  }
                }
                if (ty == 2 and tx == 8 and fy == 1) {
                  if (bi == 8 and bj == 2) {
                    if (motigoma[6] == 1 and motigoma[22] == 1) {
                      value += 5;
                    }
                  }
                }
                if (fy == 3 and fx == 3) {
                  if (kiki[4][4][0] >= kiki[4][4][1]) {
                    if (capture == 0 and !checked and !tumi_flag) {
                      value -= 15;
                    }
                  } else {
                    if (ty == 4 and tx == 3) {
                      value += 10;
                    }
                  }
                }
                if (fy == 3 and fx == 5) {
                  value -= 4;
                }
                if (fy == 2 and fx == 6) {
                  if (ty == 3 and tx == 5) {
                    if (koma[board[8][8]][2] == hi and capture == 0 and !checked and !tumi_flag) {
                      value -= 8;
                    }
                  }
                }
                if (fy == 3 and fx == 4) {
                  if (koma[board[2][4]][2] == ehi) {
                    value += 3;
                  }
                }
                if (fy == 4 and fx == 2) {
                  if (ty == 3 and tx == 3) {
                    if (board[4][3] == 0) {
                      value += 3;
                    }
                  }
                }
                if (fy == 4 and fx == 3) {
                  if (ty < fy) {
                    value -= 3;
                  }
                }
                if (ty == koma[1][0] and 1 >= dx and fy == 0) {
                  value += 10;
                }
                if (koma[board[ty + 1][tx]][2] == ka or koma[board[ty + 1][tx - 1]][2] == hi or koma[board[ty + 1][tx + 1]][2] == hi) {
                  value += 3;
                } else {
                  if (prom == 0) {
                    if (koma[board[ty - 1][tx - 1]][2] == ki or koma[board[ty - 1][tx + 1]][2] == ki) {
                      if (koma[board[ty - 1][tx - 1]][2] == hi or koma[board[ty - 1][tx + 1]][2] == hi) {
                        value += 13;
                      } else {
                        if (k0 < k1 or kiki[ty - 1][tx][1] >= kiki[ty - 1][tx][0]) {
                          value += 10;
                        } else {
                          value -= 12;
                        }
                      }
                    } else {
                      if (koma[board[ty - 1][tx - 1]][2] == hi or koma[board[ty - 1][tx + 1]][2] == hi) {
                        if (k0 < k1 or kiki[ty - 1][tx][1] >= kiki[ty - 1][tx][0]) {
                        } else {
                          value -= 12;
                        }
                      }
                    }
                  }
                }
                if (ty == 9) {
                  if (board[ty - 1][tx - 1] == 0 and board[ty - 1][tx + 1] == 0) {
                    value -= 5;
                  }
                }
                if (3 >= tx and fy < ty and fy >= 2) {
                  if (koma[board[2][2]][2] == ehi and 2 >= kiki[6][2][0]) {
                    value += tx * 2 + 3;
                    if (1 >= kiki[6][2][0]) {
                      value += 5;
                    }
                  }
                }
                if (capture) {
                  if (tx == 1 and k1 >= k0 and koma[board[1][1]][2] == eky) {
                    value += 50;
                  }
                }
              } else {
                if (he == ki) {
                  if (!checked and !tumi_flag) {
                    if (0 < fy) {
                      if (tesu < 40) {
                        if (ty == 2 and tx == 7) {
                          value += 5;
                          if (3 >= tesu) {
                            value += 20;
                          }
                        } else {
                          if (ty == 2 and tx == 3) {
                            if (7 < board_num and fy != 3) {
                              value += 12;
                            }
                            if (koma[board[2][2]][2] != ehi) {
                              value += 4;
                            }
                          }
                        }
                        if (tx < fx) {
                          value -= 3;
                        }
                      }
                      if (ty == 2 and tx == 8) {
                        value -= 5;
                      }
                      if (fy == 2 and fx == 7) {
                        value -= 9;
                      }
                      if (fy == 2 and fx == 5) {
                        value -= 9;
                      }
                      if (fy == 2 and fx == 6) {
                        value -= 7;
                      }
                      if (fy == 3 and fx == 7) {
                        value += 3;
                      }
                      if (fy == 3 and fx == 4) {
                        if (koma[board[2][4]][2] == ehi) {
                          value += 3;
                        }
                      }
                      if (20 < tesu and syuban) {
                        if (board_d1[fy][fx] == 1 and board_d1[ty][tx] == 2) {
                          value -= 5;
                        } else {
                          if (board_d1[fy][fx] == 1 and board_d1[ty][tx] == 2) {
                            value -= 3;
                          }
                        }
                      }
                    } else {
                      if (motigoma[20]) {
                        value -= 3;
                      }
                      if (1 >= dx and ty >= koma[2][0] and koma[2][0] + 1 >= ty) {
                        i = 0;
                        while (1 >= i) {
                          j = -1;
                          while (1 >= j) {
                            if (kiki[koma[2][0] + 1][koma[2][1] + j][0]) {
                              value += 2;
                            }
                            ++j;
                          }
                          ++i;
                        }
                      }
                    }
                  }
                  if (ty >= 7) {
                    if (koma[board[ty][tx - 1]][2] == gi or koma[board[ty][tx + 1]][2] == gi) {
                      value += 6;
                    }
                  }
                } else {
                  if (he == ka or he == um) {
                    if (he2 == ka and 0 < fy) {
                      if (2 < ty and ty < 7) {
                        if (kiki[fy][fx][0] == 0) {
                          if (capture == 0 and 8 >= board_num) {
                            value -= ty * 2;
                          }
                          if (ty == 2) {
                            value += 3;
                          }
                        }
                      }
                    }
                    if (he2 == um) {
                      if (2 >= dy and 2 >= dx) {
                        value += 4;
                      }
                    }
                    if (fy == 2 and fx == 8) {
                      if (koma[board[3][7]][2] & enemy) {
                        value += 5;
                      }
                      if (kiki[fy][fx][0]) {
                        if (ty == 1) {
                          value -= 10;
                        }
                      }
                    }
                    if (fy == 1 and fx == 7) {
                      if (ty == 2 and tx == 6) {
                        value += 5;
                      }
                    }
                    if (fy == 0) {
                      if (ty == 9 and tx == 7) {
                        if (board[8][6] == 0 and kiki[9][7][1] == 0 and kiki[8][7][1] < kiki[8][7][0]) {
                          if (koma[board[7][5]][2] == fu or koma[board[6][4]][2] == fu or board[4][2] != 0) {
                            value -= 20;
                          }
                        }
                      } else {
                        if (ty == 9 and tx == 3) {
                          if (board[8][4] == 0 and kiki[9][3][1] == 0 and kiki[8][3][1] < kiki[8][3][0]) {
                            if (koma[board[7][5]][2] == fu or koma[board[6][6]][2] == fu) {
                              value -= 20;
                            }
                          }
                        }
                      }
                      if (ty < 7) {
                        if (kiki[ty][tx][0] == 0) {
                          value -= 5;
                        } else {
                          i = 1;
                          while (kiki[ty][tx][0] >= i) {
                            if (koma[kiki_u[ty][tx][0][i]][2] == ka) {
                              value += 10;
                            }
                            ++i;
                          }
                        }
                      } else {
                        value += 12;
                        f = koma[board[ty + 1][tx - 1]][2];
                        h = koma[board[ty + 1][tx + 1]][2];
                        if ((f == ky or f == ke) and kiki[ty + 1][tx - 1][0] == 0) {
                          value += 5;
                        }
                        if ((h == ky or h == ke) and kiki[ty + 1][tx + 1][0] == 0) {
                          value += 5;
                        }
                        if (f == hi or h == hi) {
                          value += 8;
                        }
                      }
                      if (ty == koma[1][0] + 1 and dx == 1) {
                        value += 15;
                      }
                      if (ty == 9) {
                        if (koma[board[ty - 1][tx - 1]][2] == ki or koma[board[ty - 1][tx + 1]][2] == ki) {
                          if (k0 < k1 or kiki[ty - 1][tx][1] >= kiki[ty - 1][tx][0]) {
                          } else {
                            value -= 10;
                          }
                        }
                        if (koma[board[ty - 1][tx - 1]][2] == hi or koma[board[ty - 1][tx + 1]][2] == hi) {
                          if (k0 < k1 or kiki[ty - 1][tx][1] >= kiki[ty - 1][tx][0]) {
                          } else {
                            value -= 10;
                          }
                        }
                      }
                    }
                    if (board_num >= 0 and 7 >= board_num) {
                      if (capture == ka and he == ka) {
                        value += 20;
                        if (ty == 8 and tx == 2 or ty == 7 and tx == 3) {
                          value += 25;
                        }
                      }
                    }
                    if (prom and fy < 7) {
                      value += 10;
                    }
                    if (capture) {
                      if (0 < k1) {
                        if (ty >= 5) {
                          value -= 20;
                        }
                      } else {
                        value += 4;
                      }
                    }
                  } else {
                    if (he == hi or he == ry) {
                      if (tx == 6) {
                        value -= 3;
                      }
                      if (he2 == hi and 0 < fy) {
                        i = 1;
                        while (i < ty) {
                          if (koma[board[i][tx]][2] == efu) {
                            if (capture == 0) {
                              value -= 15;
                              break;
                            }
                          }
                          ++i;
                        }
                        if (ty == 2 and tx == 2) {
                          value += 4;
                          if (fx == 4) {
                            if (kiki[6][2][0] >= 3) {
                              value -= 3;
                            }
                          }
                          if (8 < board_num) {
                            if (30 < tesu) {
                              value -= 4;
                            } else {
                              value += 16;
                            }
                          }
                        }
                        if (2 < ty and ty < 7 and capture == 0) {
                          value -= ty * 2;
                        }
                      }
                      if (fy == 2 and fx == 2 and capture == 0) {
                        value -= 4;
                        if (tx == 4) {
                          if (kiki[6][2][0] >= 3) {
                            value += 3;
                          }
                        } else {
                          if (tx == 1) {
                            if (koma[board[5][1]][2] == eky) {
                              value += 3;
                            } else {
                              value -= 2;
                            }
                          }
                        }
                        if (8 < board_num) {
                          if (30 < tesu) {
                            value += 4;
                          } else {
                            value -= 8;
                          }
                        }
                      }
                      if (ty == koma[1][0]) {
                        value += 5;
                      }
                      if (fy == koma[1][0]) {
                        if (fy != ty) {
                          value -= 5;
                        }
                      }
                      if (fy < 7) {
                        if (ty >= 7 and koma[1][0] >= 7) {
                          value += 15;
                        }
                        f = 0;
                        i = ty + 1;
                        while (9 >= i) {
                          if (board[i][tx] != 0) {
                            f = 1;
                            break;
                          }
                          ++i;
                        }
                        if (f == 0) {
                          i = 7;
                          while (9 >= i) {
                            if (kiki[i][tx][0] == 0) {
                              f = 1;
                              break;
                            }
                            ++i;
                          }
                          if (f) {
                            value += 25;
                          }
                        }
                      } else {
                        if (ty < 7 and koma[1][0] >= 7 and 1 >= capture) {
                          value -= 30;
                        }
                      }
                      if (he2 == ry) {
                        if (2 >= dy and 2 >= dx) {
                          value += 4;
                        }
                        if (k0) {
                          value -= 10;
                        }
                      }
                      if (capture and ty >= 5) {
                        if (0 < k1) {
                          i = 1;
                          while (k1 + 1 >= i) {
                            if (kiki_u[ty][tx][1][i] < kan and koma[kiki_u[ty][tx][1][i]][2] != ehi and koma[kiki_u[ty][tx][1][i]][2] != ery) {
                              value -= 50;
                            }
                            ++i;
                          }
                        } else {
                          value += 3;
                        }
                      }
                      if (8 < board_num) {
                        if (fy == ty) {
                          if (tx == fx + math.floor(math.random() * 8) - 3) {
                            value += 3;
                          }
                          if (tx == 1) {
                            value -= 2;
                          }
                          if (tx >= 2 and 5 >= tx) {
                            value += 1;
                          }
                          if (board_num == 9 and tx == 4) {
                            value += 1;
                          }
                        }
                      }
                      if (fy == 0) {
                        if (ty < 7) {
                          value -= 30;
                        } else {
                          value += 10;
                          if (ty >= 8) {
                            value += 5;
                          }
                        }
                      }
                      if (prom) {
                        if (koma[1][0] >= 8) {
                          if (ty < 8) {
                            value -= promote_point[he];
                          }
                        }
                        if (fy >= 7) {
                          value -= 20;
                        }
                      }
                      if (syuban) {
                        if (1 >= math.abs(fy - koma[1][0]) and dy >= 2) {
                          value -= 50;
                        }
                      }
                    } else {
                      if (he == ou) {
                        if (50 < tesu) {
                          value -= 3;
                        }
                        if (fy >= 3) {
                          if (fy < ty) {
                            value += 5;
                          }
                        }
                        if (fy >= 5) {
                          if (ty < fy) {
                            value -= 5;
                          }
                        }
                        if (ty == 1 and tx == 6) {
                          if (fy == 1 and fx == 5) {
                            value += 5;
                            if (tesu < 20) {
                              value += 3;
                            }
                          }
                        }
                        if (ty == 1 and tx == 7) {
                          if (fy == 1 and fx == 6) {
                            if (koma[board[2][5]][2] != eki and koma[board[2][3]][2] != eki) {
                              value += 4;
                            }
                          }
                        }
                        if (fy == 1 and fx == 7) {
                          value -= 2;
                          if (ty == 2 and tx == 6) {
                            value -= 3;
                          }
                        }
                        if (fy == 2 and fx == 8) {
                          value -= 5;
                        }
                        if (fy == 1 and fx == 6) {
                          value -= 3;
                          if (ty == 2 and tx == 6) {
                            value -= 2;
                            if (koma[board[8][8]][2] == hi or koma[board[8][8]][2] == ry) {
                              value -= 3;
                            }
                          }
                        }
                        if (7 < board_num) {
                          if (ty == 2 and tx == 6 and tesu == 0) {
                            value += 20;
                          }
                          if (ty == 2 and tx == 7) {
                            value += 5;
                            if (tesu < 3) {
                              value += 15;
                            }
                          }
                          if (fy == 2 and fx == 7) {
                            value -= 10;
                            if (board_num == 13 and koma[board[8][8]][2] == hi) {
                              value -= 12;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (kingin[he2]) {
          if (0 < fy) {
            if (0 < (ty - fy) * (koma[1][0] - fy - 1)) {
              value += 3;
            }
            if (0 < (tx - fx) * (koma[1][1] - fx)) {
              value += 3;
            }
            if (he2 == gi) {
            } else {
              if (capture == 0) {
                if (5 < fy) {
                  if (ty < fy) {
                    value += 1;
                  } else {
                    if (fy < ty) {
                      value -= 1;
                      if (board_num < 8) {
                        value -= 1;
                      }
                    }
                  }
                }
                if (ty == 9) {
                  value -= 3;
                }
              }
            }
            if (he2 == to or he2 == ny or he2 == nk) {
              if ((tx - fx) * (koma[1][1] - fx) < 0) {
                value -= 8;
              }
              if (k1 >= k0) {
                value += 3;
                if (he2 == to) {
                  value += 1;
                }
              } else {
                if (he2 == to and capture == 0) {
                  value -= 6;
                }
              }
            }
            if (fy == 3 and fx == 7 and koma[board[2][8]][2] == eka) {
              value += 4;
            }
            if (fy == 4 and fx == 6 and koma[board[2][8]][2] == eka) {
              value += 4;
            }
          }
          if (ty >= 4) {
            value -= math.abs(tx - 5) - 2;
          }
          if (k1 >= k0) {
            if (koma[board[ty + 1][tx - 1]][2] == hi or koma[board[ty + 1][tx + 1]][2] == hi) {
              value += 5;
            }
            if (syuban) {
              if (1 >= dx and ty == koma[1][0] - 2) {
                value += 10;
                if (tx == koma[1][1]) {
                  value += 5;
                }
              }
            }
          }
          if (koma[board[ty + 2][tx]][2] == fu) {
            if (front == 0 and capture == 0) {
              value -= 7;
            }
          }
          if (syuban and ty >= 7 and k1) {
            i = 1;
            while (k1 >= i) {
              u = kiki_u[ty][tx][1][i];
              if (koma[u][2] == ery or koma[u][2] == ehi) {
                if (u < kan and koma[u][0] == ty and koma[1][0] == ty) {
                  value -= 10;
                }
              }
              ++i;
            }
          }
          if (front != fu) {
            if (k1 >= k0) {
              if (ty == koma[1][0] - 1 and 1 >= dx) {
                value += 1800;
                if (0 < fy) {
                  value += 200;
                }
                if (tx == koma[1][1]) {
                  value += 200;
                }
                value -= math.abs(tx - 5) * 100;
              }
            }
            if (koma[board[ty - 1][tx]][2] == efu and fy == 0 and front != ky) {
              if (ty >= 7 and 2 >= dx and k0 >= k1 and ty < koma[1][0]) {
                i = -1;
                while (1 >= i) {
                  u = board[ty + 1][tx + i];
                  if (koma[u][2] >= gi and ou >= koma[u][2]) {
                    value += point[syuban][he2] + 30;
                    break;
                  }
                  ++i;
                }
              }
            }
          }
          if (ty == koma[1][0] - 1 and 1 >= dx and k1 and k1 + 1 == k0) {
            f = 0;
            i = 1;
            while (kiki[ty][tx][0] >= i) {
              u = kiki_u[ty][tx][0][i] % kan;
              y = koma[u][0];
              x = koma[u][1];
              if (kiki[y][x][1] and 1 < u and y == koma[1][0]) {
                j = 1;
                while (kiki[y][x][1] >= j) {
                  h = koma[kiki_u[y][x][1][j]][2];
                  if (h == ehi or h == ery) {
                    if (koma[kiki_u[y][x][1][j]][0] == y) {
                      f = 1;
                      break;
                    }
                  }
                  ++j;
                }
              }
              ++i;
            }
            if (f) {
              value += 1800;
              if (0 < fy) {
                value += 200;
              }
              if (tx == koma[1][1]) {
                value += 200;
              }
              value -= math.abs(tx - 5) * 100;
            }
          }
        }
        if (koma[board[2][8]][2] == eka) {
          if (ty == 3 and tx == 7) {
            value -= 7;
          }
          if (fy == 3 and fx == 7) {
            value += 7;
          }
          if (ty == 4 and tx == 6) {
            value -= 5;
          }
          if (fy == 4 and fx == 6) {
            value += 5;
          }
        }
        assume(0, fy, fx, ty, tx, prom);
        k0 = kiki0[ty][tx][0];
        k1 = kiki0[ty][tx][1];
        k00 = koma0[2][0];
        k01 = koma0[2][1];
        if (kiki0[k00][k01][0]) {
          return undefined;
        }
        if (kiki0[koma0[1][0]][koma0[1][1]][1]) {
          if (tumi_check(koma0[1][0], koma0[1][1])) {
            if (he == fu and fy == 0) {
              return undefined;
            }
            value += 6000;
            if (best_value < value) {
              change_best_value(he0, he, capture, fy, fx, tx, ty, value);
              return undefined;
            }
          }
          value += 5;
          if (prom) {
            value += 5;
          }
          if (point[syuban][he] < point[syuban][capture]) {
            value += (point[syuban][capture] - point[syuban][he]) * 5 + 1500;
          }
          if (k1 >= k0) {
            if (1 >= dy and 1 >= dx) {
              value += 70 - ty * 5;
            }
            if (capture) {
              if (1 >= dy and 1 >= dx) {
                value += point[syuban][capture] * 3 + 1600;
              } else {
                if (kiki[ty][tx][0] == 0) {
                  if (capture == fu) {
                    if (tx == koma[1][1] and ty < 7) {
                      value += 5;
                    } else {
                      value += point[syuban][capture] * 3 + 1400;
                    }
                  } else {
                    value += point[syuban][capture] * 3 + 1400;
                  }
                }
              }
            }
          }
        } else {
          if (capture == 0 and k1 == 0 and k0 and !gida and !checked and !tumi_flag) {
            return undefined;
          }
        }
        i = -1;
        while (1 >= i) {
          j = -1;
          while (1 >= j) {
            y = k00 + i;
            x = k01 + j;
            if (board0[y][x] < ob and (i != 0 or j != 0)) {
              if (1 < kiki0[y][x][0] or kiki0[y][x][0] and board0[y][x] == 0 and sente_motigoma) {
                danger = 1;
                break;
              }
            }
            ++j;
          }
          if (danger) {
            break;
          }
          ++i;
        }
        if (danger) {
          same = true;
          i = -1;
          while (1 >= i) {
            j = -1;
            while (1 >= j) {
              y = k00 + i;
              x = k01 + j;
              if (board0[y][x] < ob) {
                if (board[y][x] != board0[y][x] or kiki[y][x][0] != kiki0[y][x][0] or kiki[y][x][1] != kiki0[y][x][1]) {
                  same = false;
                  break;
                }
              }
              ++j;
            }
            if (!same) {
              break;
            }
            ++i;
          }
          if (same) {
            if (tumi_flag) {
              value -= 1000;
              mate = true;
            }
          } else {
            search_flag = false;
            if (fy == 0 and 1 < board_d1[ty][tx]) {
              i = 0;
              while (search_num >= i) {
                same = true;
                j = 0;
                while (2 >= j) {
                  k = 0;
                  while (2 >= k) {
                    y = k00 + j - 1;
                    x = k01 + k - 1;
                    if (board0[y][x] < ob and (j != 1 or k != 1)) {
                      if (kiki0[y][x][0] != searched[i][j][k][0] or kiki0[y][x][1] != searched[i][j][k][1]) {
                        same = false;
                        break;
                      }
                    }
                    ++k;
                  }
                  if (!same) {
                    break;
                  }
                  ++j;
                }
                if (same) {
                  if (searched[i][3] == 2) {
                    value -= 1000;
                    mate = true;
                  }
                  break;
                }
                ++i;
              }
              if (!same) {
                search_flag = true;
              }
            }
            if (!same) {
              saveto1();
              i = -1;
              while (1 >= i) {
                j = -1;
                while (1 >= j) {
                  y = k00 + i;
                  x = k01 + j;
                  if (kiki1[y][x][0] and kiki1[y][x][0] >= kiki1[y][x][1] - 1 and (i != 0 or j != 0)) {
                    if (make_oute(y, x, 0)) {
                      danger = 2;
                      value -= 1000;
                      mate = true;
                      break;
                    }
                  }
                  ++j;
                }
                if (danger == 2) {
                  break;
                }
                ++i;
              }
              loadfrom1();
            }
            if (search_flag) {
              ++search_num;
              searched[search_num] = [[[], [], []], [[], [], []], [[], [], []], danger];
              i = 0;
              while (2 >= i) {
                j = 0;
                while (2 >= j) {
                  y = k00 + i - 1;
                  x = k01 + j - 1;
                  if (board0[y][x] < ob and (i != 1 or j != 1)) {
                    searched[search_num][i][j][0] = kiki0[y][x][0];
                    searched[search_num][i][j][1] = kiki0[y][x][1];
                  }
                  ++j;
                }
                ++i;
              }
            }
          }
        }
        if (capture) {
          if (2 >= math.abs(k00 - ty + 1) and 2 >= math.abs(k01 - tx)) {
            value += 10;
            if (1 >= math.abs(k00 - ty + 1) and 1 >= math.abs(k01 - tx)) {
              value += 10;
            }
          }
          if (motigoma[capture + enemy] == 0) {
            value += 7;
          } else {
            if (motigoma[capture + enemy] >= 2) {
              value -= 7;
            }
          }
          if (2 >= dy and 2 >= dx and capture != fu) {
            value += 5;
            if (syuban) {
              if (capture == ki) {
                value += 30;
              }
            }
            if (1 >= dy and 1 >= dx) {
              value += 20;
              if (syuban) {
                value += 10;
                if (capture == ki or capture == gi or capture == hi or capture == ry) {
                  value += 10;
                }
                if (capture == ki) {
                  value += 10;
                  if (he == ka and ty >= 8) {
                    value += 80;
                  }
                }
              }
            }
          }
          if (ty == k00 + 1 and tx == k01) {
            value += 20;
          }
        } else {
          if (he != fu and front == fu) {
            if (board_d0[ty][tx] == 1 and k1 >= k0) {
            } else {
              value -= 250;
            }
          }
        }
        var rirekis = 0;
        i = 0;
        while (i < 10) {
          if (rireki_y[i] == ty and rireki_x[i] == tx and rireki_h[i] == he) {
            ++rirekis;
            value -= 100 * rirekis;
          }
          ++i;
        }
        if (math.random() * 10 < 1) {
          value += 5;
        }
        if (ty == bi and tx == bj) {
          value += 5;
        }
        if (k1 < k0) {
          minus_kiki(ty, tx);
        }
        i = -1;
        while (1 >= i) {
          j = -1;
          while (1 >= j) {
            y = k00 + i + 1;
            x = k01 + j;
            if (board0[y][x] < ob) {
              value += kiki0[y][x][1];
            }
            ++j;
          }
          ++i;
        }
        if (fy >= 7 and he != hi and he != ry) {
          if (kiki[fy][fx][1]) {
            i = 1;
            while (kiki[fy][fx][1] >= i) {
              if (koma[kiki_u[fy][fx][1][i]][2] == ehi or koma[kiki_u[fy][fx][1][i]][2] == ery) {
                if (koma[kiki_u[fy][fx][1][i]][0] == fy and math.abs(fx - koma[1][1]) < math.abs(koma[kiki_u[fy][fx][1][i]][1] - koma[1][1])) {
                  value += 10;
                  if (he == fu or he == ky) {
                    value += 3;
                  }
                  break;
                }
              }
              ++i;
            }
          }
        }
        if (kiki0[k00 + 1][k01][0] and 2 >= k00 and !mate) {
          f = 1;
          i = -1;
          while (1 >= i) {
            y = k00 - 1;
            x = k01 + i;
            u = board0[y][x];
            if (u < ob and kiki0[y][x][0] == 0) {
              if (u == 0 or 0 < u and !(koma[u][2] & enemy)) {
                f = 0;
                break;
              }
            }
            ++i;
          }
          if (f) {
            p = kiki0[k00 + 1][k01][0];
            if (motigoma[5] and board0[k00 + 1][k01] == 0) {
              ++p;
            }
            i = 1;
            while (kiki0[k00 + 1][k01][1] >= i) {
              u = kiki_u0[k00 + 1][k01][1][i];
              if (2 < u and u < kan) {
                var y0 = koma0[u][0];
                var x0 = koma0[u][1];
                f = false;
                j = 1;
                while (kiki0[y0][x0][0] >= j) {
                  var ut = kiki_u0[y0][x0][0][j];
                  h = koma0[ut][2] % enemy;
                  if (tobikoma[h] and ut < kan) {
                    var ddy = y0 - koma0[ut][0];
                    var ddx = x0 - koma0[ut][1];
                    if (h == ry and ddy * ddx != 0 or h == um and ddy * ddx == 0) {
                    } else {
                      if (ddy != 0) {
                        var dist = math.abs(ddy);
                      } else {
                        var dist = math.abs(ddx);
                      }
                      k = 1;
                      while (8 >= k) {
                        y = y0 + (ddy / dist) * k;
                        x = x0 + (ddx / dist) * k;
                        if (y == k00 + 1 and x == k01) {
                          ++p;
                          f = true;
                          break;
                        }
                        if (0 < board0[y][x]) {
                          f = true;
                          break;
                        }
                        ++k;
                      }
                    }
                  }
                  if (f) {
                    break;
                  }
                  ++j;
                }
              }
              ++i;
            }
            if (kiki0[k00 + 1][k01][1] < p) {
              value -= 1000;
            }
          }
        }
        i = 1;
        while (3 >= i) {
          j = 1;
          while (9 >= j) {
            if (kiki0[i][j][1] < kiki0[i][j][0]) {
              if (board0[i][j] == 0 or koma0[board0[i][j]][2] & enemy) {
                tmp = 0;
                k = 1;
                while (kiki0[i][j][0] >= k) {
                  u = kiki_u0[i][j][0][k] % kan;
                  h = koma0[u][2];
                  if (h != ou and h != ki and !(h & promoted)) {
                    if (tmp < promote_point[h]) {
                      tmp = promote_point[h];
                      if (h == hi or h == ka) {
                        tmp += 20;
                        if (i == 1 and j == 3) {
                          if (h == hi and koma0[board[2][2]][2] == ehi and koma0[2][0] == 1) {
                            value -= 100;
                          }
                        }
                      }
                      if (1 >= math.abs(j - k01)) {
                        value -= 30;
                        if (j == k01) {
                          value -= 10;
                        }
                      }
                      tmp_u = u;
                    }
                  }
                  ++k;
                }
                if (0 < tmp and used[tmp_u] != 1) {
                  used[tmp_u] = 1;
                  if (syuban) {
                    if (board_d1[i][j] >= 3) {
                      tmp -= board_d1[i][j] * 5;
                      if (tmp < 0) {
                        tmp = 0;
                      }
                    } else {
                      if (board_d1[i][j] == 1) {
                        tmp *= 2;
                      }
                    }
                  }
                  value -= tmp;
                }
              }
            }
            ++j;
          }
          ++i;
        }
        if (narikoma < 2) {
          i = 7;
          while (9 >= i) {
            j = 1;
            while (9 >= j) {
              if (kiki0[i][j][0] < kiki0[i][j][1]) {
                if (board0[i][j] == 0 or !(koma0[board0[i][j]][2] & enemy)) {
                  tmp = 0;
                  k = 1;
                  while (kiki0[i][j][1] >= k) {
                    u = kiki_u0[i][j][1][k] % kan;
                    h = koma0[u][2] - enemy;
                    if (h != ou and h != ki and !(h & promoted)) {
                      if (tmp < promote_point[h]) {
                        tmp = promote_point[h];
                        tmp_u = u;
                      }
                    }
                    ++k;
                  }
                  if (0 < tmp and used[tmp_u] != 1) {
                    used[tmp_u] = 1;
                    if (syuban) {
                      if (board_d0[i][j] >= 3) {
                        tmp -= board_d1[i][j] * 5;
                        if (tmp < 0) {
                          tmp = 0;
                        }
                      } else {
                        if (board_d0[i][j] == 1) {
                          tmp *= 2;
                        }
                      }
                    }
                    value += tmp / (narikoma * 5 + 5);
                  }
                }
              }
              ++j;
            }
            ++i;
          }
        }
        atari = 1;
        atari2 = 0;
        i = -1;
        while (1 >= i) {
          j = -1;
          while (1 >= j) {
            y = k00 + i;
            x = k01 + j;
            if (board0[y][x] < ob) {
              if (kiki0[y][x][0]) {
                value -= 3;
                if (kiki0[y][x][1] < kiki0[y][x][0] or kiki0[y][x][0] == kiki0[y][x][1] and board0[y][x] == 0 and sente_motigoma) {
                  value -= oumawari[i][j];
                }
              }
            }
            ++j;
          }
          ++i;
        }
        i = -1;
        while (1 >= i) {
          j = -1;
          while (1 >= j) {
            y = koma0[1][0] + i;
            x = koma0[1][1] + j;
            if (board0[y][x] < ob) {
              value += kiki0[y][x][1] * 5;
              if (kiki0[y][x][0] < kiki0[y][x][1]) {
                value += 5;
                if (0 < board0[y][x] and !(koma0[board0[y][x]][2] & enemy)) {
                  value += 10;
                }
              } else {
                if (kiki0[y][x][1] == kiki0[y][x][0] and board0[y][x] == 0 and gote_motigoma) {
                  value += 10;
                }
              }
            }
            ++j;
          }
          ++i;
        }
        i = 1;
        while (40 >= i) {
          y = koma0[i][0];
          if (0 < y) {
            x = koma0[i][1];
            h = koma0[i][2] % enemy;
            p = point[syuban][h];
            if (syuban) {
              pp = math.min(board_d0[y][x], board_d1[y][x]);
              if (pp >= 3) {
                p -= pp * 5;
                if (p < 5) {
                  p = 5;
                }
              } else {
                if (pp == 1) {
                  p *= 1.200000047683716;
                }
              }
            }
            kk0 = kiki0[y][x][0];
            kk1 = kiki0[y][x][1];
            if (koma0[i][2] & enemy) {
              if (h == ke) {
                if (kiki0[y + 1][x][0] >= kiki0[y + 1][x][1] and board0[y + 1][x] == 0) {
                  value -= 10;
                }
              } else {
                if (h == ka) {
                  if (kiki0[y + 1][x][0] >= kiki0[y + 1][x][1]) {
                    value -= 2;
                  }
                }
              }
              if (kk1 == 0) {
                value -= 1;
              }
              if (i == 2) {
              } else {
                if (0 < kk0 - kk1) {
                  value -= p;
                  if (koma0[board[y - 1][x]][2] == efu and board_d1[y][x] >= 3) {
                    if (koma0[board[y + 1][x]][2] != fu) {
                      value += p / 2;
                    }
                  }
                } else {
                  if (kk0) {
                    min_point = 286;
                    j = 1;
                    while (kk0 >= j) {
                      ah = koma0[kiki_u0[y][x][0][j] % kan][2];
                      if (point[syuban][ah] < min_point) {
                        min_point = point[syuban][ah];
                      }
                      ++j;
                    }
                    if (p >= min_point) {
                      value -= p - min_point + 6;
                    }
                  }
                }
              }
            } else {
              if (h == hi or h == ry) {
                if (y == k00 or x == k01) {
                  value -= 3;
                }
              } else {
                if (h == ky) {
                  if (x == k01) {
                    value -= 3;
                  }
                } else {
                  if (h == ka or h == um) {
                    if (math.abs(y - k00) == math.abs(x - k01)) {
                      value -= 3;
                    }
                  }
                }
              }
              tmp = 0;
              if (0 < kk1 - kk0) {
                tmp = p;
              } else {
                if (kk1) {
                  min_point = 286;
                  j = 1;
                  while (kk1 >= j) {
                    ah = koma0[kiki_u0[y][x][1][j] % kan][2] - enemy;
                    if (point[syuban][ah] < min_point) {
                      min_point = point[syuban][ah];
                    }
                    ++j;
                  }
                  if (min_point < p) {
                    tmp = p - min_point;
                  }
                }
              }
              if (board_d0[y][x] == 1) {
                tmp *= 3;
              }
              if (atari < tmp) {
                atari2 = atari;
                atari = tmp;
              } else {
                if (atari2 < tmp) {
                  atari2 = tmp;
                }
              }
            }
          }
          ++i;
        }
        if (1 < atari2) {
          value += atari2 / 2 + 5;
        } else {
          if (1 < atari) {
            value += atari / 30 + 5;
          }
        }
        value += (kiki_sum0[1] - kiki_sum0[0]) / 2;
        if (best_value < value) {
          change_best_value(he0, he, capture, fy, fx, tx, ty, value);
        } else {
          if (best_value2 < value) {
            bb2 = he0;
            cc2 = he;
            dd2 = capture;
            ii2 = fy;
            jj2 = fx;
            xx2 = tx;
            yy2 = ty;
            best_value2 = value;
          }
        }
      }

      function change_best_value(he0, he, capture, fy, fx, tx, ty, value) {
        bb2 = bb;
        cc2 = cc;
        dd2 = dd;
        ii2 = ii;
        jj2 = jj;
        xx2 = xx;
        yy2 = yy;
        best_value2 = best_value;
        bb = he0;
        cc = he;
        dd = capture;
        ii = fy;
        jj = fx;
        xx = tx;
        yy = ty;
        best_value = value;
      }

      function yukoda(c, i, j) {
        var e;
        var f;
        var h;
        var k;
        var l;
        var x;
        var y;
        var flag = false;
        var oute = false;
        var tataki = false;
        k = 0;
        while (k < can_n[c]) {
          x = j + can_x[c][k];
          y = i - can_y[c][k];
          e = board[y][x];
          if (e != ob) {
            if (0 < e) {
              h = koma[e][2];
              if (h & enemy) {
                if (kiki[y][x][0]) {
                  flag = true;
                  break;
                }
              } else {
                flag = true;
                break;
              }
            }
            if (kiki[y][x][0] and 3 >= y) {
              m = 1;
              while (kiki[y][x][0] >= m) {
                if (!(koma[kiki_u[y][x][0][m]][2] & promoted) and koma[kiki_u[y][x][0][m]][2] != ki) {
                  flag = true;
                  break;
                }
                ++m;
              }
              if (flag) {
                break;
              }
            }
            if (board_k[y][x]) {
              flag = true;
              break;
            }
          }
          ++k;
        }
        if (flag) {
        } else {
          if (c == fu) {
            if (i >= 6 and kiki[i + 1][j][1] >= kiki[i + 1][j][0]) {
              flag = true;
            }
          } else {
            if (c == ky) {
              k = 1;
              while (k < masu) {
                x = j;
                y = i - tobi[0][0][1] * k;
                e = board[y][x];
                if (e & ob) {
                  break;
                } else {
                  if (0 < e) {
                    h = koma[e][2];
                    if (h & enemy) {
                      if (kiki[y][x][0] or h == ehi or h == ery or h == eky or h == efu and y >= 6) {
                        flag = true;
                        break;
                      } else {
                        break;
                      }
                    } else {
                      if (h == ou) {
                        oute = true;
                      }
                      flag = true;
                      break;
                    }
                  }
                  if (kiki[y][x][0] and 3 >= y) {
                    m = 1;
                    while (kiki[y][x][0] >= m) {
                      if (!(koma[kiki_u[y][x][0][m]][2] & promoted) and koma[kiki_u[y][x][0][m]][2] != ki) {
                        flag = true;
                        break;
                      }
                      ++m;
                    }
                    if (flag) {
                      break;
                    }
                  }
                  if (board_k[y][x]) {
                    flag = true;
                    break;
                  }
                }
                ++k;
              }
            } else {
              if (tobikoma[c]) {
                if (c == hi or c == ry) {
                  g = 0;
                } else {
                  g = 1;
                }
                k = 0;
                while (k < 4) {
                  l = 1;
                  while (l < masu) {
                    x = j - tobi[g][k][0] * l;
                    y = i - tobi[g][k][1] * l;
                    e = board[y][x];
                    if (e & ob) {
                      break;
                    } else {
                      if (0 < e) {
                        h = koma[e][2];
                        if (h & enemy) {
                          if (kiki[y][x][0] or g == 0 and (h == ehi or h == ery) or g == 1 and (h == eka or h == eum)) {
                            flag = true;
                            break;
                          } else {
                            break;
                          }
                        } else {
                          if (h == ou) {
                            oute = true;
                          }
                          flag = true;
                          break;
                        }
                      }
                      if (kiki[y][x][0] and 3 >= y) {
                        m = 1;
                        while (kiki[y][x][0] >= m) {
                          if (!(koma[kiki_u[y][x][0][m]][2] & promoted) and koma[kiki_u[y][x][0][m]][2] != ki) {
                            flag = true;
                            break;
                          }
                          ++m;
                        }
                        if (flag) {
                          break;
                        }
                      }
                      if (board_k[y][x]) {
                        flag = true;
                      }
                    }
                    ++l;
                  }
                  if (oute) {
                    break;
                  }
                  ++k;
                }
              }
            }
          }
        }
        if (kiki[i][j][0]) {
          if (kiki[i][j][1]) {
            if (flag) {
              return true;
            } else {
              f = 0;
              k = 1;
              while (kiki[i][j][0] >= k) {
                if (tobikoma[koma[kiki_u[i][j][0][k]][2]]) {
                  f = 1;
                  break;
                }
                ++k;
              }
              if (f) {
                return true;
              }
            }
          } else {
            if (c == fu) {
              e = board[i + 1][j];
              if (0 < e and e != ob and !(koma[e][2] & enemy)) {
                tataki = true;
              }
            } else {
              if (c == ke) {
                if (i == koma[1][0] - 2 and math.abs(j - koma[1][1]) == 1) {
                  oute = true;
                }
              }
            }
            if (oute or tataki) {
              return true;
            }
          }
          return false;
        }
        if (flag) {
          return true;
        }
        return false;
      }

      function make_oute(yy, xx, sengo) {
        var h;
        var i;
        var u;
        var fy;
        var pr;
        var oy;
        var ox;
        b = board1[yy][xx];
        if (b == ob) {
          return false;
        }
        if (0 < b) {
          if (!(koma1[b][2] & enemy)) {
            return false;
          }
        }
        oy = koma1[2][0];
        ox = koma1[2][1];
        if (1 < kiki1[yy][xx][0] and kiki1[yy][xx][0] >= kiki1[yy][xx][1]) {
          i = 1;
          while (kiki1[yy][xx][0] >= i) {
            u = kiki_u1[yy][xx][0][i];
            if (u < kan and 2 < u) {
              h = koma1[u][2];
              fy = koma1[u][0];
              pr = 0;
              if (3 >= yy or 3 >= fy) {
                if (!(h & promoted) and h != ki) {
                  pr = 1;
                  h += promoted;
                }
              }
              if (yose[h][oy - yy + 1][ox - xx + 1]) {
                assume(1, fy, koma1[u][1], yy, xx, pr);
                if (tumi_check(oy, ox)) {
                  return true;
                } else {}
              }
            }
            ++i;
          }
        }
        if (b == 0 and kiki1[yy][xx][0] >= kiki1[yy][xx][1] - 1) {
          i = 2;
          while (7 >= i) {
            if (motigoma1[i]) {
              if (yose[i][oy - yy + 1][ox - xx + 1]) {
                assume(1, 0, i, yy, xx, 0);
                if (tumi_check(oy, ox)) {
                  return true;
                } else {}
              }
            }
            ++i;
          }
        }
        return false;
      }

      function tumi_check(yy, xx) {
        var b;
        var h;
        var i;
        var j;
        var u;
        var sengo;
        var y;
        var x;
        var dx;
        var dy;
        var dist;
        var ax;
        var ay;
        var kk;
        var mo_other;
        var mo_fu;
        var nifu;
        var ka;
        sengo = board0[yy][xx] - 1;
        sengo_n = 1 - sengo;
        i = -1;
        while (1 >= i) {
          j = -1;
          while (1 >= j) {
            y = yy + i;
            x = xx + j;
            b = board0[y][x];
            if (b != ob) {
              if (b == 0 or math.floor(koma0[b][2] / enemy) != sengo) {
                if (kiki0[y][x][sengo_n] == 0) {
                  return false;
                }
              }
            }
            ++j;
          }
          ++i;
        }
        if (1 < kiki0[yy][xx][sengo_n]) {
          ka = 0;
          i = 1;
          while (kiki0[yy][xx][sengo_n] >= i) {
            if (!(kiki_u0[yy][xx][sengo_n][i] & kan)) {
              ++ka;
              u = kiki_u0[yy][xx][sengo_n][i];
            }
            ++i;
          }
          if (1 < ka) {
            return true;
          }
        } else {
          u = kiki_u0[yy][xx][sengo_n][1];
        }
        h = koma0[u][2] % enemy;
        y = koma0[u][0];
        x = koma0[u][1];
        if (tobikoma[h]) {
          dy = yy - y;
          dx = xx - x;
          if (dy != 0) {
            dist = math.abs(dy);
          } else {
            dist = math.abs(dx);
          }
          if (dist == 1) {
            if (1 < kiki0[y][x][sengo]) {
              if (sunuki_check(y, x)) {
                return true;
              }
              return false;
            } else {
              return true;
            }
          }
          if (0 < kiki0[y][x][sengo]) {
            if (sunuki_check(y, x)) {
              return true;
            }
            return false;
          }
          mo_other = false;
          mo_fu = false;
          i = 2 + sengo * enemy;
          while (7 + sengo * enemy >= i) {
            if (0 < motigoma0[i]) {
              mo_other = true;
              break;
            }
            ++i;
          }
          if (0 < motigoma0[1 + sengo * enemy]) {
            mo_fu = true;
          }
          i = 1;
          while (dist - 1 >= i) {
            ay = y + (dy / dist) * i;
            ax = x + (dx / dist) * i;
            kk = kiki0[ay][ax][sengo];
            if (1 < kk) {
              if (sunuki_check(ay, ax)) {
                return true;
              }
              return false;
            }
            if (kk == 1) {
              if (mo_other) {
                return false;
              }
              if (mo_fu) {
                nifu = false;
                j = 1;
                while (9 >= j) {
                  if (koma0[board0[j][ax]][2] == fu + enemy * sengo) {
                    nifu = true;
                    break;
                  }
                  ++j;
                }
                if (!nifu) {
                  return false;
                }
              }
            }
            ++i;
          }
          return true;
        } else {
          kk = kiki0[y][x][sengo];
          if (h == ke) {
            ++kk;
          }
          if (1 < kk) {
            if (sunuki_check(y, x)) {
              return true;
            }
            return false;
          } else {
            return true;
          }
        }
      }

      function sunuki_check(yy, xx) {
        var u;
        var ut;
        var h;
        var i;
        var j;
        var k;
        var y;
        var x;
        var y0;
        var x0;
        var dy;
        var dx;
        var sunuki;
        var sengo;
        var sengo_n;
        sengo_n = math.floor(koma0[board0[yy][xx]][2] / enemy);
        sengo = 1 - sengo_n;
        i = 1;
        while (kiki0[yy][xx][sengo] >= i) {
          u = kiki_u0[yy][xx][sengo][i];
          if (2 < u and u < kan) {
            y0 = koma0[u][0];
            x0 = koma0[u][1];
            sunuki = false;
            j = 1;
            while (kiki0[y0][x0][sengo_n] >= j) {
              ut = kiki_u0[y0][x0][sengo_n][j];
              h = koma0[ut][2] % enemy;
              if (tobikoma[h] and ut < kan) {
                dy = y0 - koma0[ut][0];
                dx = x0 - koma0[ut][1];
                if (h == ry and dy * dx != 0 or h == um and dy * dx == 0) {
                } else {
                  if (dy != 0) {
                    dist = math.abs(dy);
                  } else {
                    dist = math.abs(dx);
                  }
                  k = 1;
                  while (8 >= k) {
                    y = y0 + (dy / dist) * k;
                    x = x0 + (dx / dist) * k;
                    if (0 < board0[y][x]) {
                      if (y == koma0[sengo + 1][0] and x == koma0[sengo + 1][1]) {
                        sunuki = true;
                        break;
                      } else {
                        return false;
                      }
                    }
                    ++k;
                  }
                  if (sunuki) {
                    break;
                  }
                }
              }
              ++j;
            }
            if (!sunuki) {
              return false;
            }
          }
          ++i;
        }
        return true;
      }

      function loadfrom_() {
        var i;
        var j;
        var k;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            board0[i][j] = board[i][j];
            kiki0[i][j][0] = kiki[i][j][0];
            kiki0[i][j][1] = kiki[i][j][1];
            k = 1;
            while (kiki0[i][j][0] >= k) {
              kiki_u0[i][j][0][k] = kiki_u[i][j][0][k];
              ++k;
            }
            k = 1;
            while (kiki0[i][j][1] >= k) {
              kiki_u0[i][j][1][k] = kiki_u[i][j][1][k];
              ++k;
            }
            ++j;
          }
          ++i;
        }
        i = 1;
        while (40 >= i) {
          koma0[i][0] = koma[i][0];
          koma0[i][1] = koma[i][1];
          koma0[i][2] = koma[i][2];
          ++i;
        }
        i = 1;
        while (7 >= i) {
          motigoma0[i] = motigoma[i];
          motigoma0[i + enemy] = motigoma[i + enemy];
          j = 1;
          while (motigoma0[i] >= j) {
            motigoma_u0[i][j] = motigoma_u[i][j];
            ++j;
          }
          j = 1;
          while (motigoma0[i + enemy] >= j) {
            motigoma_u0[i + enemy][j] = motigoma_u[i + enemy][j];
            ++j;
          }
          ++i;
        }
        kiki_sum0[0] = kiki_sum[0];
        kiki_sum0[1] = kiki_sum[1];
      }

      function saveto1() {
        var i;
        var j;
        var k;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            board1[i][j] = board0[i][j];
            kiki1[i][j][0] = kiki0[i][j][0];
            kiki1[i][j][1] = kiki0[i][j][1];
            k = 1;
            while (kiki1[i][j][0] >= k) {
              kiki_u1[i][j][0][k] = kiki_u0[i][j][0][k];
              ++k;
            }
            k = 1;
            while (kiki1[i][j][1] >= k) {
              kiki_u1[i][j][1][k] = kiki_u0[i][j][1][k];
              ++k;
            }
            ++j;
          }
          ++i;
        }
        i = 1;
        while (40 >= i) {
          koma1[i][0] = koma0[i][0];
          koma1[i][1] = koma0[i][1];
          koma1[i][2] = koma0[i][2];
          ++i;
        }
        i = 1;
        while (7 >= i) {
          motigoma1[i] = motigoma0[i];
          motigoma1[i + enemy] = motigoma0[i + enemy];
          j = 1;
          while (motigoma1[i] >= j) {
            motigoma_u1[i][j] = motigoma_u0[i][j];
            ++j;
          }
          j = 1;
          while (motigoma1[i + enemy] >= j) {
            motigoma_u1[i + enemy][j] = motigoma_u0[i + enemy][j];
            ++j;
          }
          ++i;
        }
        kiki_sum1[0] = kiki_sum0[0];
        kiki_sum1[1] = kiki_sum0[1];
      }

      function loadfrom1() {
        var i;
        var j;
        var k;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            board0[i][j] = board1[i][j];
            kiki0[i][j][0] = kiki1[i][j][0];
            kiki0[i][j][1] = kiki1[i][j][1];
            k = 1;
            while (kiki0[i][j][0] >= k) {
              kiki_u0[i][j][0][k] = kiki_u1[i][j][0][k];
              ++k;
            }
            k = 1;
            while (kiki0[i][j][1] >= k) {
              kiki_u0[i][j][1][k] = kiki_u1[i][j][1][k];
              ++k;
            }
            ++j;
          }
          ++i;
        }
        i = 1;
        while (40 >= i) {
          koma0[i][0] = koma1[i][0];
          koma0[i][1] = koma1[i][1];
          koma0[i][2] = koma1[i][2];
          ++i;
        }
        i = 1;
        while (7 >= i) {
          motigoma0[i] = motigoma1[i];
          motigoma0[i + enemy] = motigoma1[i + enemy];
          j = 1;
          while (motigoma0[i] >= j) {
            motigoma_u0[i][j] = motigoma_u1[i][j];
            ++j;
          }
          j = 1;
          while (motigoma0[i + enemy] >= j) {
            motigoma_u0[i + enemy][j] = motigoma_u1[i + enemy][j];
            ++j;
          }
          ++i;
        }
        kiki_sum0[0] = kiki_sum1[0];
        kiki_sum0[1] = kiki_sum1[1];
      }

      function plus_kiki(yy, xx) {
        var uni;
        var he;
        var sengo;
        var pm;
        var e;
        var f;
        var g;
        var i;
        var j;
        var k;
        var x;
        var y;
        var x0;
        var y0;
        var ka;
        uni = board0[yy][xx];
        he = koma0[uni][2] % enemy;
        sengo = math.floor(koma0[uni][2] / enemy);
        pm = 1 - sengo * 2;
        i = 0;
        while (i < can_n[he]) {
          x = xx + can_x[he][i];
          y = yy + can_y[he][i] * pm;
          if (board0[y][x] != ob) {
            ++kiki0[y][x][sengo];
            kiki_u0[y][x][sengo][kiki0[y][x][sengo]] = uni;
            ++kiki_sum0[sengo];
          }
          ++i;
        }
        ka = 0;
        if (he == ky) {
          i = 1;
          while (i < masu) {
            x = xx;
            y = yy + tobi[0][0][1] * i * pm;
            e = board0[y][x];
            f = 0;
            if (e & ob) {
              break;
            } else {
              if (0 < e) {
                if (math.floor(koma0[e][2] / enemy) == sengo) {
                  f = tobikoe[0][0][koma0[e][2] % enemy - 1];
                } else {
                  if (koma0[e][2] % enemy == ou) {
                    f = 1;
                  }
                }
                if (f == 2) {
                  ka = kan;
                } else {
                  if (f == 1) {
                    y0 = y + tobi[0][0][1] * pm;
                    ++kiki0[y0][x][sengo];
                    kiki_u0[y0][x][sengo][kiki0[y0][x][sengo]] = uni + kan;
                    ++kiki_sum0[sengo];
                  }
                  ++kiki0[y][x][sengo];
                  kiki_u0[y][x][sengo][kiki0[y][x][sengo]] = uni + ka;
                  ++kiki_sum0[sengo];
                  break;
                }
              }
            }
            ++kiki0[y][x][sengo];
            kiki_u0[y][x][sengo][kiki0[y][x][sengo]] = uni + ka;
            ++kiki_sum0[sengo];
            ++i;
          }
        } else {
          if (tobikoma[he]) {
            if (he == hi or he == ry) {
              g = 0;
            } else {
              g = 1;
            }
            k = 0;
            while (k < 4) {
              ka = 0;
              i = 1;
              while (i < masu) {
                x = xx + tobi[g][k][0] * i * pm;
                y = yy + tobi[g][k][1] * i * pm;
                e = board0[y][x];
                f = 0;
                if (e & ob) {
                  break;
                } else {
                  if (0 < e) {
                    if (math.floor(koma0[e][2] / enemy) == sengo) {
                      f = tobikoe[g][k][koma0[e][2] % enemy - 1];
                    } else {
                      if (koma0[e][2] % enemy == ou) {
                        f = 1;
                      }
                    }
                    if (f == 2) {
                      ka = kan;
                    } else {
                      if (f == 1) {
                        x0 = x + tobi[g][k][0] * pm;
                        y0 = y + tobi[g][k][1] * pm;
                        ++kiki0[y0][x0][sengo];
                        ++kiki_sum0[sengo];
                        kiki_u0[y0][x0][sengo][kiki0[y0][x0][sengo]] = uni + kan;
                      }
                      ++kiki0[y][x][sengo];
                      kiki_u0[y][x][sengo][kiki0[y][x][sengo]] = uni + ka;
                      ++kiki_sum0[sengo];
                      break;
                    }
                  }
                }
                ++kiki0[y][x][sengo];
                kiki_u0[y][x][sengo][kiki0[y][x][sengo]] = uni + ka;
                ++kiki_sum0[sengo];
                ++i;
              }
              ++k;
            }
          }
        }
      }

      function minus_kiki(yy, xx) {
        var uni;
        var he;
        var sengo;
        var pm;
        var e;
        var f;
        var g;
        var i;
        var j;
        var k;
        var x;
        var y;
        var x0;
        var y0;
        uni = board0[yy][xx];
        he = koma0[uni][2] % enemy;
        sengo = math.floor(koma0[uni][2] / enemy);
        pm = 1 - sengo * 2;
        i = 0;
        while (i < can_n[he]) {
          x = xx + can_x[he][i];
          y = yy + can_y[he][i] * pm;
          if (board0[y][x] != ob) {
            j = 1;
            while (kiki0[y][x][sengo] >= j) {
              if (kiki_u0[y][x][sengo][j] == uni) {
                kiki_u0[y][x][sengo].splice(j, 1);
                break;
              }
              ++j;
            }
            --kiki0[y][x][sengo];
            --kiki_sum0[sengo];
          }
          ++i;
        }
        if (he == ky) {
          i = 1;
          while (i < masu) {
            x = xx;
            y = yy + tobi[0][0][1] * i * pm;
            e = board0[y][x];
            f = 0;
            if (e & ob) {
              break;
            } else {
              if (0 < e) {
                if (math.floor(koma0[e][2] / enemy) == sengo) {
                  f = tobikoe[0][0][koma0[e][2] % enemy - 1];
                } else {
                  if (koma0[e][2] % enemy == ou) {
                    f = 1;
                  }
                }
                if (f < 2) {
                  if (f == 1) {
                    y0 = y + tobi[0][0][1] * pm;
                    j = 1;
                    while (kiki0[y0][x][sengo] >= j) {
                      if (kiki_u0[y0][x][sengo][j] == uni) {
                        kiki_u0[y0][x][sengo].splice(j, 1);
                        break;
                      }
                      ++j;
                    }
                    --kiki0[y0][x][sengo];
                    --kiki_sum0[sengo];
                  }
                  j = 1;
                  while (kiki0[y][x][sengo] >= j) {
                    if (kiki_u0[y][x][sengo][j] == uni) {
                      kiki_u0[y][x][sengo].splice(j, 1);
                      break;
                    }
                    ++j;
                  }
                  --kiki0[y][x][sengo];
                  --kiki_sum0[sengo];
                  break;
                }
              }
            }
            j = 1;
            while (kiki0[y][x][sengo] >= j) {
              if (kiki_u0[y][x][sengo][j] == uni) {
                kiki_u0[y][x][sengo].splice(j, 1);
                break;
              }
              ++j;
            }
            --kiki0[y][x][sengo];
            --kiki_sum0[sengo];
            ++i;
          }
        } else {
          if (tobikoma[he]) {
            if (he == hi or he == ry) {
              g = 0;
            } else {
              g = 1;
            }
            k = 0;
            while (k < 4) {
              i = 1;
              while (i < masu) {
                x = xx + tobi[g][k][0] * i * pm;
                y = yy + tobi[g][k][1] * i * pm;
                e = board0[y][x];
                f = 0;
                if (e & ob) {
                  break;
                } else {
                  if (0 < e) {
                    if (math.floor(koma0[e][2] / enemy) == sengo) {
                      f = tobikoe[g][k][koma0[e][2] % enemy - 1];
                    } else {
                      if (koma0[e][2] % enemy == ou) {
                        f = 1;
                      }
                    }
                    if (f < 2) {
                      if (f == 1) {
                        x0 = x + tobi[g][k][0] * pm;
                        y0 = y + tobi[g][k][1] * pm;
                        j = 1;
                        while (kiki0[y0][x0][sengo] >= j) {
                          if (kiki_u0[y0][x0][sengo][j] == uni) {
                            kiki_u0[y0][x0][sengo].splice(j, 1);
                            break;
                          }
                          ++j;
                        }
                        --kiki0[y0][x0][sengo];
                        --kiki_sum0[sengo];
                      }
                      j = 1;
                      while (kiki0[y][x][sengo] >= j) {
                        if (kiki_u0[y][x][sengo][j] == uni) {
                          kiki_u0[y][x][sengo].splice(j, 1);
                          break;
                        }
                        ++j;
                      }
                      --kiki0[y][x][sengo];
                      --kiki_sum0[sengo];
                      break;
                    }
                  }
                }
                j = 1;
                while (kiki0[y][x][sengo] >= j) {
                  if (kiki_u0[y][x][sengo][j] == uni) {
                    kiki_u0[y][x][sengo].splice(j, 1);
                    break;
                  }
                  ++j;
                }
                --kiki0[y][x][sengo];
                --kiki_sum0[sengo];
                ++i;
              }
              ++k;
            }
          }
        }
      }

      function assume(start, fy, fx, ty, tx, prom) {
        var i;
        var j;
        var k;
        var he_c;
        var uni;
        var uni_c;
        var cu;
        var ch;
        var used = [];
        var capturing = false;
        var change = [];
        var change_num = 0;
        if (start == 0) {
          loadfrom_();
        } else {
          if (start == 1) {
            loadfrom1();
          }
        }
        if (fy == 0) {
          uni = motigoma_u0[fx][motigoma0[fx]];
          --motigoma0[fx];
        } else {
          uni = board0[fy][fx];
          minus_kiki(fy, fx);
        }
        uni_c = board0[ty][tx];
        if (0 < uni_c and uni_c != ob) {
          capturing = true;
          he_c = koma0[uni_c][2];
          minus_kiki(ty, tx);
        }
        i = 0;
        while (i < 2) {
          j = 1;
          while (kiki0[fy][fx][i] >= j) {
            cu = kiki_u0[fy][fx][i][j] % kan;
            ch = koma0[cu][2] % enemy;
            if (tobikoma[ch]) {
              if (used[cu] != 1) {
                used[cu] = 1;
                change[change_num] = cu;
                ++change_num;
              }
            }
            ++j;
          }
          j = 1;
          while (kiki0[ty][tx][i] >= j) {
            cu = kiki_u0[ty][tx][i][j] % kan;
            ch = koma0[cu][2] % enemy;
            if (tobikoma[ch]) {
              if (used[cu] != 1) {
                used[cu] = 1;
                change[change_num] = cu;
                ++change_num;
              }
            }
            ++j;
          }
          ++i;
        }
        i = 0;
        while (i < change_num) {
          minus_kiki(koma0[change[i]][0], koma0[change[i]][1]);
          ++i;
        }
        board0[ty][tx] = uni;
        koma0[uni][0] = ty;
        koma0[uni][1] = tx;
        koma0[uni][2] += prom * promoted;
        if (fy != 0) {
          board0[fy][fx] = 0;
        }
        if (capturing) {
          koma0[uni_c][0] = 0;
          if (he_c & promoted) {
            he_c -= promoted;
          }
          if (he_c & enemy) {
            he_c -= enemy;
          } else {
            he_c += enemy;
          }
          koma0[uni_c][2] = he_c;
          ++motigoma0[he_c];
          motigoma_u0[he_c][motigoma0[he_c]] = uni_c;
        }
        plus_kiki(ty, tx);
        i = 0;
        while (i < change_num) {
          plus_kiki(koma0[change[i]][0], koma0[change[i]][1]);
          ++i;
        }
      }

      function calc_kiki() {
        var b;
        var c;
        var d;
        var e;
        var f;
        var g;
        var i;
        var j;
        var k;
        var l;
        var x;
        var y;
        var x0;
        var y0;
        var ka;
        y = koma[1][0];
        x = koma[1][1];
        y0 = koma[2][0];
        x0 = koma[2][1];
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            kiki[i][j][0] = 0;
            kiki[i][j][1] = 0;
            board_k[i][j] = 0;
            board_d0[i][j] = math.max(math.abs(y - i), math.abs(x - j));
            board_d1[i][j] = math.max(math.abs(y0 - i), math.abs(x0 - j));
            ++j;
          }
          ++i;
        }
        i = 0;
        while (1 >= i) {
          j = -1;
          while (1 >= j) {
            board_k[y + i - 1][x + j] = 1;
            board_k[y0 + i][x0 + j] = 2;
            ++j;
          }
          ++i;
        }
        kiki_sum = [0, 0];
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            b = koma[board[i][j]][2];
            if (b) {
              c = b % enemy;
              d = math.floor(b / enemy);
              k = 0;
              while (k < can_n[c]) {
                x = j + can_x[c][k];
                y = i + can_y[c][k] * (1 - d * 2);
                e = board[y][x];
                if (e != ob) {
                  ++kiki[y][x][d];
                  kiki_u[y][x][d][kiki[y][x][d]] = board[i][j];
                  ++kiki_sum[d];
                }
                ++k;
              }
              ka = 0;
              if (c == ky) {
                k = 1;
                while (k < masu) {
                  x = j;
                  y = i + tobi[0][0][1] * k * (1 - d * 2);
                  e = board[y][x];
                  f = 0;
                  if (e & ob) {
                    break;
                  } else {
                    if (0 < e) {
                      if (math.floor(koma[e][2] / enemy) == d) {
                        f = tobikoe[0][0][koma[e][2] % enemy - 1];
                      } else {
                        if (koma[e][2] % enemy == ou) {
                          f = 1;
                        }
                      }
                      if (f == 2) {
                        ka = kan;
                      } else {
                        if (f == 1) {
                          y0 = y + tobi[0][0][1] * (1 - d * 2);
                          ++kiki[y0][x][d];
                          kiki_u[y0][x][d][kiki[y0][x][d]] = board[i][j] + kan;
                          ++kiki_sum[d];
                        }
                        ++kiki[y][x][d];
                        kiki_u[y][x][d][kiki[y][x][d]] = board[i][j] + ka;
                        ++kiki_sum[d];
                        break;
                      }
                    }
                  }
                  ++kiki[y][x][d];
                  kiki_u[y][x][d][kiki[y][x][d]] = board[i][j] + ka;
                  ++kiki_sum[d];
                  ++k;
                }
              } else {
                if (tobikoma[c]) {
                  if (c == hi or c == ry) {
                    g = 0;
                  } else {
                    g = 1;
                  }
                  k = 0;
                  while (k < 4) {
                    ka = 0;
                    l = 1;
                    while (l < masu) {
                      x = j + tobi[g][k][0] * l * (1 - d * 2);
                      y = i + tobi[g][k][1] * l * (1 - d * 2);
                      e = board[y][x];
                      f = 0;
                      if (e & ob) {
                        break;
                      } else {
                        if (0 < e) {
                          if (math.floor(koma[e][2] / enemy) == d) {
                            f = tobikoe[g][k][koma[e][2] % enemy - 1];
                          } else {
                            if (koma[e][2] % enemy == ou) {
                              f = 1;
                            }
                          }
                          if (f == 2) {
                            ka = kan;
                          } else {
                            if (f == 1) {
                              y0 = y + tobi[g][k][1] * (1 - d * 2);
                              x0 = x + tobi[g][k][0] * (1 - d * 2);
                              ++kiki[y0][x0][d];
                              kiki_u[y0][x0][d][kiki[y0][x0][d]] = board[i][j] + kan;
                              ++kiki_sum[d];
                            }
                            ++kiki[y][x][d];
                            kiki_u[y][x][d][kiki[y][x][d]] = board[i][j] + ka;
                            ++kiki_sum[d];
                            break;
                          }
                        }
                      }
                      ++kiki[y][x][d];
                      kiki_u[y][x][d][kiki[y][x][d]] = board[i][j] + ka;
                      ++kiki_sum[d];
                      ++l;
                    }
                    ++k;
                  }
                }
              }
            }
            ++j;
          }
          ++i;
        }
      }

      function show_kiki() {
        var i;
        var j;
        _root.txt2 = '';
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            _root.txt2 += kiki0[i][j][0] + '' + kiki0[i][j][1] + ' ';
            if (j == 9) {
              _root.txt2 += '\n';
            }
            ++j;
          }
          ++i;
        }
      }

      function show_board() {
        var i;
        var j;
        _root.txt2 = '';
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            _root.txt2 += board_d0[i][j] + ' ';
            if (j == 9) {
              _root.txt2 += '\n';
            }
            ++j;
          }
          ++i;
        }
      }

      function show_kiki_u() {
        calc_kiki();
        _root.txt2 = '';
        var i;
        var a;
        var b;
        a = _root.mc20.txt1;
        b = _root.mc20.txt2;
        var i = 1;
        while (kiki[a][b][0] >= i) {
          _root.txt2 += kiki_u[a][b][0][i] + ', ';
          ++i;
        }
        _root.txt2 += '\n';
        var i = 1;
        while (kiki[a][b][1] >= i) {
          _root.txt2 += kiki_u[a][b][1][i] + ', ';
          ++i;
        }
      }

      function r_back() {
        if (!game_over) {
          return undefined;
        }
        if (tesu < 1) {
          return undefined;
        }
        if (_root.m.soundflag) {
          _root.s1.play();
        }
        var yf = r_y_from[tesu];
        var xf = r_x_from[tesu];
        var yt = r_y_to[tesu];
        var xt = r_x_to[tesu];
        var yt2 = r_y_to[tesu - 1];
        var xt2 = r_x_to[tesu - 1];
        var c = r_capture[tesu];
        _root.k['_' + yf + '_' + xf]._visible = true;
        if (yf == 0) {
          ++motigoma[xf];
          _root.n['_' + xf].t = motigoma[xf];
          if (1 < motigoma[xf]) {
            _root.n['_' + xf]._visible = true;
          }
        } else {
          board[yf][xf] = board[yt][xt] - r_promote[tesu] * promoted;
          _root.k['_' + yf + '_' + xf].g.gotoandstop(board[yf][xf]);
        }
        board[yt][xt] = c;
        if (c) {
          _root.k['_' + yt + '_' + xt].g.gotoandstop(c);
          _root.k['_' + yt + '_' + xt]._visible = true;
          if (c & promoted) {
            c -= promoted;
          }
          if (c & enemy) {
            c -= enemy;
          } else {
            c += enemy;
          }
          --motigoma[c];
          _root.n['_' + c].t = motigoma[c];
          if (motigoma[c] < 1) {
            _root.k['_0_' + c]._visible = false;
          }
          if (motigoma[c] < 2) {
            _root.n['_' + c]._visible = false;
          }
        } else {
          _root.k['_' + yt + '_' + xt]._visible = false;
        }
        _root.k['_' + yt + '_' + xt].b._visible = false;
        _root.k['_' + yt2 + '_' + xt2].b._visible = true;
        --tesu;
        _root.t = tesu;
      }

      function r_forward() {
        if (!game_over) {
          return undefined;
        }
        if (tesu >= tesu_max) {
          return undefined;
        }
        if (_root.m.soundflag) {
          _root.s1.play();
        }
        ++tesu;
        _root.t = tesu;
        var yf = r_y_from[tesu];
        var xf = r_x_from[tesu];
        var yt = r_y_to[tesu];
        var xt = r_x_to[tesu];
        var yt2 = r_y_to[tesu - 1];
        var xt2 = r_x_to[tesu - 1];
        var c = r_capture[tesu];
        if (yf == 0) {
          board[yt][xt] = xf;
          --motigoma[xf];
          _root.n['_' + xf].t = motigoma[xf];
          if (motigoma[xf] < 2) {
            _root.n['_' + xf]._visible = false;
          }
          if (motigoma[xf] < 1) {
            _root.k['_0_' + xf]._visible = false;
          }
        } else {
          board[yt][xt] = board[yf][xf] + r_promote[tesu] * promoted;
          _root.k['_' + yf + '_' + xf]._visible = false;
        }
        _root.k['_' + yt + '_' + xt].g.gotoandstop(board[yt][xt]);
        _root.k['_' + yt + '_' + xt]._visible = true;
        if (c) {
          if (c & promoted) {
            c -= promoted;
          }
          if (c & enemy) {
            c -= enemy;
          } else {
            c += enemy;
          }
          ++motigoma[c];
          _root.n['_' + c].t = motigoma[c];
          _root.k['_0_' + c]._visible = true;
          if (1 < motigoma[c]) {
            _root.n['_' + c]._visible = true;
          }
        }
        _root.k['_' + yt2 + '_' + xt2].b._visible = false;
        _root.k['_' + yt + '_' + xt].b._visible = true;
      }

      function r_start() {
        if (!game_over) {
          return undefined;
        }
        if (_root.m.soundflag) {
          _root.s1.play();
        }
        var i;
        var j;
        var k;
        var obj;
        tesu = 0;
        _root.t = tesu;
        i = 0;
        while (i < masu) {
          j = 0;
          while (j < masu) {
            board[i + 1][j + 1] = koma_def[board_def[i][j]][2];
            ++j;
          }
          ++i;
        }
        i = 0;
        while (i < 2) {
          j = 0;
          while (j < masu) {
            if (board_num < 8) {
              k = i + 7;
            } else {
              k = i;
            }
            board[k + 1][j + 1] = koma_def[boards[board_num][i][j]][2];
            ++j;
          }
          ++i;
        }
        if (board_num == 14) {
          i = 1;
          while (9 >= i) {
            board[3][i] = 0;
            ++i;
          }
        }
        if (board_num == 7) {
          i = 1;
          while (9 >= i) {
            board[7][i] = 0;
            ++i;
          }
        }
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            k = board[i][j];
            obj = _root.k['_' + i + '_' + j];
            if (k) {
              obj._visible = true;
              obj.g.gotoandstop(k);
            } else {
              obj._visible = false;
            }
            obj.b._visible = false;
            ++j;
          }
          ++i;
        }
        i = 0;
        while (i < 24) {
          motigoma[i] = 0;
          _root.k['_0_' + i]._visible = false;
          _root.n['_' + i].t = 0;
          _root.n['_' + i]._visible = false;
          ++i;
        }
      }

      function r_end() {
        if (!game_over) {
          return undefined;
        }
        if (_root.m.soundflag) {
          _root.s1.play();
        }
        var i;
        var j;
        var k;
        var obj;
        var yt2 = r_y_to[tesu_max];
        var xt2 = r_x_to[tesu_max];
        tesu = tesu_max;
        _root.t = tesu;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            board[i][j] = board_t[i - 1][j - 1];
            k = board[i][j];
            obj = _root.k['_' + i + '_' + j];
            if (k) {
              obj._visible = true;
              obj.g.gotoandstop(k);
            } else {
              obj._visible = false;
            }
            obj.b._visible = false;
            ++j;
          }
          ++i;
        }
        _root.k['_' + yt2 + '_' + xt2].b._visible = true;
        i = 0;
        while (i < 24) {
          motigoma[i] = motigoma_t[i];
          j = motigoma[i];
          if (j) {
            _root.k['_0_' + i]._visible = true;
          } else {
            _root.k['_0_' + i]._visible = false;
          }
          _root.n['_' + i].t = j;
          if (1 < j) {
            _root.n['_' + i]._visible = true;
          } else {
            _root.n['_' + i]._visible = false;
          }
          ++i;
        }
      }

      function resign() {
        if (_root.s._visible or _root.ru._visible or _root.j._visible or _root.tr._visible or _root.k.p_type._visible or game_over or pause) {
          return undefined;
        }
        winner = 1;
        if (_root.m.soundflag) {
          _root.s3.play();
        }
        game_end();
        _root.h.gotoandstop('win');
      }

      function game_end() {
        var i;
        var j;
        var w_m;
        var w_h;
        var tmp_rank;
        var r = [8, 9, 10, 11, 12, 13, 14, 15, 7, 6, 5, 4, 3, 2, 1];
        game_over = true;
        i = 1;
        while (9 >= i) {
          j = 1;
          while (9 >= j) {
            board[i][j] = koma[board[i][j]][2];
            board_t[i - 1][j - 1] = board[i][j];
            ++j;
          }
          ++i;
        }
        i = 0;
        while (i < 24) {
          motigoma_t[i] = motigoma[i];
          ++i;
        }
        _root.r.gotoandstop(3);
        _root.r.m.gotoandstop(winner + 1);
        if (guide) {
          hide_guide();
        }
        if (0 < _root.m.won or winner == 1 and board_num == 14) {
          tmp_rank = r[board_num];
          if (winner == 1) {
            --tmp_rank;
            _root.m.rank = math.min(_root.m.rank, tmp_rank);
          } else {
            _root.m.rank = math.max(_root.m.rank, tmp_rank);
            var wme = [7, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0];
            _root.m.wm[wme[board_num]] = 1;
          }
          _root.txt5 = _root.m.smsg[53] + _root.m.smsg[105 + _root.m.rank] + _root.m.smsg[53];
        }
        if (board_num == 0 and 5 < tesu_max) {
          sender_lv = new loadvars();
          _root.m.loader_lv.onload = function () {
            tmp_score = _root.m.loader_lv.s.split(',');
            if (winner == 0) {
              tmp_score[0] = parseint(tmp_score[0], 10) + 1;
            } else {
              tmp_score[1] = parseint(tmp_score[1], 10) + 1;
            }
            sender_lv.s = tmp_score.tostring();
            sender_lv.sendandload('./cgi-bin/saveshogi_score.cgi', sender_lv, 'POST');
          };

          _root.m.loader_lv.load('./cgi-bin/shogi_score.txt?' + new date());
        }
      }

      setup_line();
    }

    onClipEvent (mouseDown) {
      move();
      zzz_cnt = 0;
      if (zzz) {
        zzz = false;
        if (_root.s._visible) {
          _root.h.gotoandplay(1);
        } else {
          _root.h.gotoandstop('def');
        }
      }
    }

    onClipEvent (mouseMove) {
      if (_root.k.p_type._visible) {
        _root.k.p_type._x = _root._xmouse;
        _root.k.p_type._y = _root._ymouse;
      }
    }

    onClipEvent (enterFrame) {
      if (++zzz_cnt == 1800) {
        if (!zzz and !game_over) {
          zzz = true;
          _root.h.gotoandplay('zzz');
        }
      }
      if (m_flag) {
        _root.c._y += m_dy;
        _root.c._x += m_dx;
        _root.c._visible = true;
        ++m_cnt;
        if (m_cnt >= 8) {
          if (_root.m.soundflag) {
            _root.s1.play();
          }
          if (100 < best_value) {
            _root.h.gotoandplay('yuri2');
          } else {
            if (50 < best_value) {
              _root.h.gotoandplay('yuri1');
            } else {
              if (best_value < -100) {
                _root.h.gotoandplay('furi2');
              } else {
                if (best_value < -50) {
                  _root.h.gotoandplay('furi1');
                }
              }
            }
          }
          _root.c._visible = false;
          _root.c.gotoandstop(m_c);
          m_flag = false;
          c_flag = m_c_flag;
          obj = _root.k['_' + m_y + '_' + m_x];
          obj._visible = true;
          obj.g.gotoandstop(m_h);
          if (m_win) {
            if (_root.m.soundflag) {
              _root.s3.play();
            }
            winner = 1;
            game_end();
            _root.h.gotoandstop('win');
          }
          _root.k['_' + bi + '_' + bj].b._visible = false;
          obj.b._visible = true;
          bi = m_y;
          bj = m_x;
          if (guide and !game_over) {
            show_guide();
          }
          pause = false;
        }
      } else {
        if (c_flag) {
          _root.c._y += c_dy;
          _root.c._x += c_dx;
          _root.c._visible = true;
          ++c_cnt;
          if (c_cnt >= 4) {
            _root.k['_0_' + c_h]._visible = true;
            _root.n['_' + c_h].t = motigoma[c_h];
            if (1 < motigoma[c_h]) {
              _root.n['_' + c_h]._visible = true;
            }
            _root.c._visible = false;
            c_flag = false;
            if (_root.m.soundflag) {
              _root.s8.play();
            }
          }
        } else {
          if (++cnt == 3) {
            think();
          }
        }
      }
    }

    onClipEvent (keyDown) {
      if (!_root.ru._visible and !_root.j._visible and !_root.tr._visible) {
        if (key.isdown(key.left)) {
          r_back();
        } else {
          if (key.isdown(key.right)) {
            r_forward();
          }
        }
        if (key.isdown(key.down)) {
          r_start();
        } else {
          if (key.isdown(key.up)) {
            r_end();
          }
        }
      }
    }
  }

  instance mc10 of movieClip 169  {

    onClipEvent (release) {
      _root.h._visible = false;
      _root.h_cheese.gotoandplay(1);
      _root.h_cheese._visible = true;
    }

    onClipEvent (rollOver) {
      _root.s4.play();
    }
  }

  instance ru_button of movieClip 233  {

    onClipEvent (rollOver) {
      _root.s4.play();
      this.gotoandstop(2);
    }

    onClipEvent (rollOut) {
      this.gotoandstop(1);
    }

    onClipEvent (release) {
      _root.s5.play();
      if (!_root.k.p_type._visible) {
        if (_root.ru._visible) {
          _root.s._visible = _root.as.opening;
          _root.ru._visible = false;
        } else {
          _root.s._visible = false;
          _root.j._visible = false;
          _root.tr._visible = false;
          _root.ru._visible = true;
        }
      }
    }
  }

  instance mc16 of movieClip 239  {

    onClipEvent (rollOver) {
      this.gotoandstop(2);
      _root.s4.play();
    }

    onClipEvent (rollOut) {
      this.gotoandstop(1);
    }

    onClipEvent (release) {
      _root.s5.play();
      _root.prevframe();
    }
  }

  instance j_button of movieClip 245  {

    onClipEvent (rollOver) {
      _root.s4.play();
      this.gotoandstop(2);
    }

    onClipEvent (rollOut) {
      this.gotoandstop(1);
    }

    onClipEvent (release) {
      _root.s5.play();
      if (!_root.k.p_type._visible) {
        if (_root.j._visible) {
          _root.s._visible = _root.as.opening;
          _root.j._visible = false;
        } else {
          _root.s._visible = false;
          _root.ru._visible = false;
          _root.tr._visible = false;
          _root.j._visible = true;
        }
      }
    }
  }

  instance tr_button of movieClip 251  {

    onClipEvent (rollOver) {
      _root.s4.play();
      this.gotoandstop(2);
    }

    onClipEvent (rollOut) {
      this.gotoandstop(1);
    }

    onClipEvent (release) {
      _root.s5.play();
      if (!_root.k.p_type._visible) {
        if (_root.tr._visible) {
          _root.s._visible = _root.as.opening;
          _root.tr._visible = false;
        } else {
          _root.s._visible = false;
          _root.j._visible = false;
          _root.ru._visible = false;
          _root.tr._visible = true;
        }
      }
    }
  }

  button 1425 {

    on (release) {
      _root.as.show_kiki();
    }
  }

  button 1427 {

    on (release) {
      _root.as.show_board();
    }
  }

  button 1429 {

    on (release) {
      _root.as.test();
    }
  }
}
